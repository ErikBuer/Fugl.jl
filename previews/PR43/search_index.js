var documenterSearchIndex = {"docs":
[{"location":"interaction/#User-interaction","page":"User interaction","title":"User interaction","text":"","category":"section"},{"location":"interaction/","page":"User interaction","title":"User interaction","text":"using Fugl\n\nfunction MyApp()\n    Container( on_click=() -> println(\"Clicked\") )\nend\nnothing #hide","category":"page"},{"location":"interaction/","page":"User interaction","title":"User interaction","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        TextButton(\"Some Text\", on_click=() -> println(\"Clicked\"))\n    )\nend\nnothing #hide","category":"page"},{"location":"interaction/","page":"User interaction","title":"User interaction","text":"using Fugl\n\n# Ref for maintining the slider state\nslider_value = Ref(0.5f0)\n\nfunction MyApp()\n    Container(\n        HorizontalSlider(\n            slider_value[],\n            0.0f0,              # min value\n            1.0f0;              # max value\n            on_change=(new_value) -> (slider_value[] = new_value)\n        )\n    )\nend\n\nnothing #hide","category":"page"},{"location":"Components/slider/#Sliders","page":"Sliders","title":"Sliders","text":"","category":"section"},{"location":"Components/slider/","page":"Sliders","title":"Sliders","text":"using Fugl\n\n# Ref for maintining the slider state\nslider_value = Ref(0.5f0)\n\nfunction MyApp()\n    Container(\n        HorizontalSlider(\n            slider_value[],\n            0.0f0,              # min value\n            1.0f0;              # max value\n            on_change=(new_value) -> (slider_value[] = new_value)\n        )\n    )\nend\n\nscreenshot(MyApp, \"horizontal_slider.png\", 400, 100);\nnothing #hide","category":"page"},{"location":"Components/slider/","page":"Sliders","title":"Sliders","text":"(Image: Horizontal slider example)","category":"page"},{"location":"Components/number_field/#Number-Field","page":"Number Field","title":"Number Field","text":"","category":"section"},{"location":"Components/number_field/","page":"Number Field","title":"Number Field","text":"The NumberField component provides type-safe numeric input with automatic parsing and validation. It extends the TextBox functionality to handle numeric types like Int, Float32, Float64, etc.","category":"page"},{"location":"Components/number_field/","page":"Number Field","title":"Number Field","text":"using Fugl\n\nfunction MyApp()\n    # Store EditorState instead of values\n    int_state = Ref(EditorState(\"42\"))\n    float_state = Ref(EditorState(\"123.45\"))\n\n    IntrinsicColumn([\n        IntrinsicHeight(Container(Fugl.Text(\"Number Field Demo - Type Casting\"))),\n\n        # Integer field\n        IntrinsicHeight(Container(Fugl.Text(\"Integer Field:\"))),\n        Container(\n            NumberField(\n                int_state[];\n                type=Int,\n                on_state_change=(new_state) -> int_state[] = new_state,\n                on_change=(new_value) -> println(\"Integer changed to: \", new_value, \" (type: \", typeof(new_value), \")\")\n            )\n        ),\n\n        # Float32 field\n        IntrinsicHeight(Container(Fugl.Text(\"Float32 Field:\"))),\n        Container(\n            NumberField(\n                float_state[];\n                type=Float32,\n                on_state_change=(new_state) -> float_state[] = new_state,\n                on_change=(new_value) -> println(\"Float32 changed to: \", new_value, \" (type: \", typeof(new_value), \")\")\n            )\n        ),\n\n        # Display current values - display the state text and parsed values\n        IntrinsicHeight(Container(Fugl.Text(\"Current Values:\"))),\n        IntrinsicHeight(Container(Fugl.Text(\"Integer: $(int_state[].text)\"))),\n        IntrinsicHeight(Container(Fugl.Text(\"Float32: $(float_state[].text)\"))),\n    ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"numberField.png\", 600, 400);\nnothing #hide","category":"page"},{"location":"Components/number_field/","page":"Number Field","title":"Number Field","text":"(Image: Number Field)","category":"page"},{"location":"Components/container/#Container","page":"Container","title":"Container","text":"","category":"section"},{"location":"Components/container/","page":"Container","title":"Container","text":"The most basic UI component.","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Fugl\n\nfunction MyApp()\n    Container()\nend\n\nscreenshot(MyApp, \"container.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Container)","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"You can add a child component to a cointainer, as such:","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        Container()\n    )\nend\n\nscreenshot(MyApp, \"container_child.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Container)","category":"page"},{"location":"Components/container/#Style","page":"Container","title":"Style","text":"","category":"section"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Fugl\n\nmy_style = ContainerStyle(;\n    background_color=Vec4{Float32}(0.3f0, 0.7f0, 0.7f0, 1.0f0),\n    border_color=Vec4{Float32}(0.0f0, 0.0f0, 0.0f0, 1.0f0),\n    border_width_px=1.0f0,\n    padding_px=25.0f0,\n    corner_radius_px=25.0f0\n)\n\nmy_style2 = ContainerStyle(;\n    background_color=Vec4{Float32}(0.7f0, 0.3f0, 0.3f0, 1.0f0),\n    border_color=Vec4{Float32}(0.0f0, 0.0f0, 0.0f0, 1.0f0),\n    border_width_px=5.0f0,\n    corner_radius_px=25.0f0\n)\n\nfunction MyApp()\n    Container(\n        Container(\n            Container(; style=my_style2);\n            style=my_style\n        )\n    )\nend\n\nscreenshot(MyApp, \"container_style.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Container Style)","category":"page"},{"location":"Components/text_box/#TextBox","page":"TextBox","title":"TextBox","text":"","category":"section"},{"location":"Components/text_box/","page":"TextBox","title":"TextBox","text":"using Fugl\nusing Fugl: Text\n\n# Create editor states for both components\ncode_editor_state = Ref(EditorState(\"\"\"function hello_world()\n    println(\"Hello, World!\")\n    return 42\nend\"\"\"))\n\ntext_box_state = Ref(EditorState(\"Enter your text here...\"))\n\nfunction MyApp()\n    IntrinsicColumn([\n        IntrinsicHeight(Container(Text(\"Text Editor Generalization Demo\"))),\n\n        # Code Editor Section\n        IntrinsicHeight(Container(Text(\"Code Editor with Syntax Highlighting:\"))),\n        Container(\n            CodeEditor(\n                code_editor_state[];\n                on_state_change=(new_state) -> code_editor_state[] = new_state,\n                on_change=(new_text) -> println(\"Optional hook. Code is now: \", new_text[1:min(20, length(new_text))], \"...\")\n            )\n        ),\n\n        # Text Box Section\n        IntrinsicHeight(Container(Text(\"Plain Text Box:\"))),\n        Container(\n            TextBox(\n                text_box_state[];\n                on_state_change=(new_state) -> text_box_state[] = new_state,\n                on_change=(new_text) -> println(\"Optional hook. Text is now: \", new_text[1:min(20, length(new_text))], \"...\")\n            )\n        ),\n    ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"textBox.png\", 600, 400);\nnothing #hide","category":"page"},{"location":"Components/text_box/","page":"TextBox","title":"TextBox","text":"(Image: Text Box)","category":"page"},{"location":"Components/text/#Text","page":"Text","title":"Text","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Text(\"Some Text\")\n    )\nend\n\nscreenshot(MyApp, \"text.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text)","category":"page"},{"location":"Components/text/#Wrapping","page":"Text","title":"Wrapping","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"The Text component support wrapping by default.","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Text(\"Some strings may be too long to fit, and must be drawn over multiple lines.\")\n    )\nend\n\nscreenshot(MyApp, \"text_wrap.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text wrapping)","category":"page"},{"location":"Components/text/#Horizontal-Alignement","page":"Text","title":"Horizontal Alignement","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            Text(\"Align left\",   horizontal_align=:left), \n            Text(\"Align center\", horizontal_align=:center), \n            Text(\"Align right\",  horizontal_align=:right)\n        ])\n    )\nend\n\nscreenshot(MyApp, \"text_align.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text horizontal alignement)","category":"page"},{"location":"Components/text/#Vertical-Alignement","page":"Text","title":"Vertical Alignement","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            Text(\"Align top\",    vertical_align=:top), \n            Text(\"Align middle\", vertical_align=:middle), \n            Text(\"Align bottom\", vertical_align=:bottom)\n        ])\n    )\nend\n\nscreenshot(MyApp, \"text_vertical_align.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text vertical alignment)","category":"page"},{"location":"Components/text/#Text-Style","page":"Text","title":"Text Style","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"Style is handeled by the TextStyle struct.","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nmy_style = TextStyle(\n    # font_path=\"SomeFont.ttf\",\n    size_px=32,\n    color=Vec4f(0.1, 0.7, 0.7, 1.0), # RGBA\n)\n\n\nfunction MyApp()\n    Container(\n        Text(\"Some text\"; style=my_style)\n    )\nend\n\nscreenshot(MyApp, \"text_style.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text Style Example)","category":"page"},{"location":"Components/dropdown/#Dropdown","page":"Dropdown","title":"Dropdown","text":"","category":"section"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"The Dropdown component provides a dropdown selection interface that allows users to choose from a list of options.  It follows the same immutable state management pattern as other Fugl components.","category":"page"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"using Fugl\nusing Fugl: Text\n\n# Initialize dropdown state\noptions = [\"Small\", \"Medium\", \"Large\", \"Extra Large\"]\n# Create initial state using Ref for reactivity\ndropdown_state = Ref(DropdownState(options; selected_index=1, is_open=true)) # force it open for demonstration purposes.\n\n# Custom styling\ndropdown_style = DropdownStyle(\n    text_style=TextStyle(size_px=18.0f0),\n    corner_radius_px=6.0f0,\n    padding_px=12.0f0,\n    item_height_px=32.0f0,\n    max_visible_items=3\n)\n\nfunction MyApp()\n    return Container(\n        IntrinsicColumn([\n            IntrinsicHeight(Container(\n                Text(\"Dropdown example:\"; style=TextStyle(size_px=20.0f0))\n            )),\n            Dropdown(\n                dropdown_state[];\n                style=dropdown_style,\n                on_state_change=(new_state) -> dropdown_state[] = new_state,\n                on_select=(value, index) -> println(\"Selected: $value (index: $index)\")\n            )\n        ])\n    )\nend\n\nscreenshot(MyApp, \"dropdown.png\", 600, 400);\nnothing #hide","category":"page"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"(Image: Dropdown)","category":"page"},{"location":"Components/image/#Image","page":"Image","title":"Image","text":"","category":"section"},{"location":"Components/image/","page":"Image","title":"Image","text":"using Fugl\n\nfunction MyApp()\n    Container(Image(\"\"))\nend\n\nscreenshot(MyApp, \"missing_image.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"(Image: Image component)","category":"page"},{"location":"Components/layout/#Layout","page":"Layout","title":"Layout","text":"","category":"section"},{"location":"Components/layout/#Column","page":"Layout","title":"Column","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"Column is a component for creating linear layout.","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        Column([\n            Container(),\n            Container(),\n            Container(),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"column.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Column example)","category":"page"},{"location":"Components/layout/#Row","page":"Layout","title":"Row","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"Row is a component for creating linear layout.","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        Row([\n            Container(),\n            Container(),\n            Container(),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"row.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Row example)","category":"page"},{"location":"Components/layout/#Sizing","page":"Layout","title":"Sizing","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            IntrinsicWidth(Container(Text(\"IntrinsicWidth\"))),\n            IntrinsicSize(Container(Text(\"IntrinsicSize\"))),\n            IntrinsicHeight(Container(Text(\"IntrinsicHeight\"))),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"intrinsic_sizing.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Intrinsic sizing example)","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            FixedSize(Container(), 400, 50),\n            FixedSize(Container(), 400, 50),\n            FixedSize(Container(), 400, 50),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"fixed_sizing.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Fixed sizing example)","category":"page"},{"location":"Components/layout/#IntrinsicColumn","page":"Layout","title":"IntrinsicColumn","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        IntrinsicColumn([\n            FixedSize(Container(Text(\"Clipping width\")), 800, 50),\n            FixedSize(Container(), 400, 50),\n            FixedSize(Container(), 200, 50),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"intrinsic_column.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Intrinsic Column)","category":"page"},{"location":"Components/layout/#IntrinsicRow","page":"Layout","title":"IntrinsicRow","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        IntrinsicRow([\n            FixedSize(Container(Text(\"Clipping Height\")), 50, 800),\n            FixedSize(Container(), 50, 400),\n            FixedSize(Container(), 50, 200),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"intrinsic_row.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Intrinsic row)","category":"page"},{"location":"Components/layout/#Alignment","page":"Layout","title":"Alignment","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"The alignment components allow you to position sized components within their containers.","category":"page"},{"location":"Components/layout/#Horizontal-Alignment","page":"Layout","title":"Horizontal Alignment","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            AlignHorizontal(FixedSize(Container(Text(\"Left\")), 100, 50), :left),\n            AlignHorizontal(FixedSize(Container(Text(\"Center\")), 100, 50), :center),\n            AlignHorizontal(FixedSize(Container(Text(\"Right\")), 100, 50), :right),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"horizontal_alignment.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Horizontal alignment example)","category":"page"},{"location":"Components/layout/#Vertical-Alignment","page":"Layout","title":"Vertical Alignment","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Row([\n            AlignVertical(IntrinsicSize(Container(Text(\"Top\"))), :top),\n            AlignVertical(IntrinsicSize(Container(Text(\"Center\"))), :center),\n            AlignVertical(IntrinsicSize(Container(Text(\"Bottom\"))), :bottom),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"vertical_alignment.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Vertical alignment example)","category":"page"},{"location":"Components/layout/#Split-Containers","page":"Layout","title":"Split Containers","text":"","category":"section"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"Split containers allow you to create resizable panels that users can adjust by dragging a handle between them. Fugl.jl provides both horizontal and vertical split containers with external state management for a clean, functional UI paradigm.","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"using Fugl\nusing Fugl: Text, SplitContainerState, SplitContainerStyle\n\nfunction MyApp()\n    # Create state refs for split containers\n    horizontal_split_state = Ref(SplitContainerState(split_position=0.3f0))  # Start with 30% for left panel\n    vertical_split_state = Ref(SplitContainerState(split_position=0.4f0))    # Start with 40% for top panel\n\n    # Create some simple content for the splits\n    left_content = Container(\n        Text(\"Click and drag the gray bar to resize!\")\n    )\n\n    right_content = Container(\n        Text(\"This side can be resized by dragging the splitter handle.\")\n    )\n\n    # Create horizontal split container - recreated each frame with current state\n    horizontal_split = HorizontalSplitContainer(\n        left_content,\n        right_content,\n        style=SplitContainerStyle(),\n        state=horizontal_split_state[],\n        on_state_change=(new_state) -> horizontal_split_state[] = new_state\n    )\n\n    # Create some content for vertical split\n    top_content = Container(\n        Text(\"This demonstrates vertical splitting\")\n    )\n\n    # Create main vertical split with horizontal split in bottom - recreated each frame with current state\n    main_split = VerticalSplitContainer(\n        top_content,\n        horizontal_split,\n        style=SplitContainerStyle(),\n        state=vertical_split_state[],\n        on_state_change=(new_state) -> vertical_split_state[] = new_state\n    )\n\n    return main_split\nend\n\nscreenshot(MyApp, \"split_containers.png\", 800, 600);\nnothing #hide","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"(Image: Split container example)","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"Split containers follow Fugl.jl's functional UI paradigm by keeping all mutable state external to the view components. The SplitContainerState struct holds the split position and interaction state, while the on_state_change callback updates the external state reference when users drag the handle.","category":"page"},{"location":"Components/layout/","page":"Layout","title":"Layout","text":"The SplitContainerStyle struct encapsulates visual appearance settings like handle thickness, colors, and minimum panel sizes, making it easy to create reusable style configurations across your application.","category":"page"},{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/#Fugl.ButtonState","page":"API Reference","title":"Fugl.ButtonState","text":"Enum representing the state of a mouse button.\n\nIsReleased: The button is currently released.\nIsPressed: The button is currently pressed.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.CursorPosition","page":"API Reference","title":"Fugl.CursorPosition","text":"Represents the position of a cursor in the editor.\n\nline: Line number (1-based)\ncolumn: Column number (1-based, character position within the line)\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.EditorState","page":"API Reference","title":"Fugl.EditorState","text":"Create a new EditorState with the given text and language.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.EditorState-2","page":"API Reference","title":"Fugl.EditorState","text":"State for the code editor containing text, cursor position, and cached tokenization.\n\ntext: The full text content\ncursor: Current cursor position\nis_focused: Whether the editor is focused\ncached_lines: Cache of tokenized line data\ntext_hash: Hash of the text to detect changes\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.EditorState-Tuple{EditorState, String}","page":"API Reference","title":"Fugl.EditorState","text":"Create a new EditorState with updated text, preserving cursor and focus state from the old state.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.EditorState-Tuple{EditorState}","page":"API Reference","title":"Fugl.EditorState","text":"Create a new EditorState with updated focus state, preserving text and cursor from the old state.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.GlyphAtlas","page":"API Reference","title":"Fugl.GlyphAtlas","text":"A texture atlas that stores multiple glyphs in a single OpenGL texture. This dramatically speeds up text rendering by avoiding texture creation per glyph.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.GlyphBatch","page":"API Reference","title":"Fugl.GlyphBatch","text":"A structure to hold batched glyph data for efficient rendering. Each glyph becomes two triangles (6 vertices) in the batch. Inspired by Makie.jl's TextureAtlas approach.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.GlyphKey","page":"API Reference","title":"Fugl.GlyphKey","text":"Unique identifier for a glyph at a specific size and font.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.GlyphUV","page":"API Reference","title":"Fugl.GlyphUV","text":"UV coordinates and dimensions for a glyph in the atlas.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.HorizontalSplitContainerView","page":"API Reference","title":"Fugl.HorizontalSplitContainerView","text":"A container that allows horizontal resizing by dragging a vertical splitter handle between left and right child components. Optimized version with no runtime direction checks for better performance.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.KeyEvent","page":"API Reference","title":"Fugl.KeyEvent","text":"Struct representing a keyboard event.\n\nkey: GLFW key code (e.g., GLFW.KEYA, GLFW.KEYENTER)\nscancode: Hardware-specific scancode\naction: GLFW action (GLFW.PRESS, GLFW.RELEASE, GLFW.REPEAT)\nmods: Modifier key flags (GLFW.MODSHIFT, GLFW.MODCONTROL, etc.)\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.LineTokenData","page":"API Reference","title":"Fugl.LineTokenData","text":"Cached tokenization data for a line of code.\n\nline_number: The line number this data belongs to\nline_text: The original line text\ntokens: Vector of tokens for this line\ntoken_data: Processed token data with positions and colors\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.MouseButton","page":"API Reference","title":"Fugl.MouseButton","text":"Enum representing the different mouse buttons.\n\nLeftButton: The left mouse button.\nRightButton: The right mouse button.\nMiddleButton: The middle mouse button (scroll button).\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.SizedView","page":"API Reference","title":"Fugl.SizedView","text":"Abstract type for views that have constrained/intrinsic sizing behavior. These views know their preferred dimensions and can be used with alignment components. Examples: IntrinsicSize, FixedSize, IntrinsicWidth, IntrinsicHeight, etc.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.VerticalSplitContainerView","page":"API Reference","title":"Fugl.VerticalSplitContainerView","text":"A container that allows vertical resizing by dragging a horizontal splitter handle between top and bottom child components. Optimized version with no runtime direction checks for better performance.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.AlignHorizontal","page":"API Reference","title":"Fugl.AlignHorizontal","text":"AlignHorizontal(child::SizedView, alignment::Symbol)\n\nAligns a sized child component horizontally within its container.\n\nArguments\n\nchild: A SizedView component that has intrinsic dimensions\nalignment: Horizontal alignment (:left, :center, :right)\n\nExample\n\nAlignHorizontal(IntrinsicSize(Image(\"logo.png\")), :left)\nAlignHorizontal(FixedSize(Text(\"Hello\"), 100.0f0, 50.0f0), :right)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.AlignVertical","page":"API Reference","title":"Fugl.AlignVertical","text":"AlignVertical(child::SizedView, alignment::Symbol)\n\nAligns a sized child component vertically within its container.\n\nArguments\n\nchild: A SizedView component that has intrinsic dimensions\nalignment: Vertical alignment (:top, :center, :bottom)\n\nExample\n\nAlignVertical(IntrinsicSize(Image(\"logo.png\")), :top)\nAlignVertical(FixedSize(Text(\"Hello\"), 100.0f0, 50.0f0), :center)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.Container","page":"API Reference","title":"Fugl.Container","text":"The Container is the most basic GUI component that can contain another component. It is the most basic building block of the GUI system.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.FixedHeight-Tuple{AbstractView, Real}","page":"API Reference","title":"Fugl.FixedHeight","text":"FixedHeight(child::AbstractView, height::Real)\n\nCreates a view that has a fixed height but uses the child's intrinsic width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.FixedSize-Tuple{AbstractView, Real, Real}","page":"API Reference","title":"Fugl.FixedSize","text":"FixedSize(child::AbstractView, width::Real, height::Real)\n\nCreates a view that has a fixed size, regardless of the child's intrinsic size. The child will be rendered at the specified width and height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.FixedWidth-Tuple{AbstractView, Real}","page":"API Reference","title":"Fugl.FixedWidth","text":"FixedWidth(child::AbstractView, width::Real)\n\nCreates a view that has a fixed width but uses the child's intrinsic height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.HorizontalSplitContainer-Tuple{AbstractView, AbstractView}","page":"API Reference","title":"Fugl.HorizontalSplitContainer","text":"HorizontalSplitContainer(left, right; kwargs...)\n\nCreate a horizontal split container with left and right child components.\n\nArguments\n\nleft::AbstractView: Left child component\nright::AbstractView: Right child component\nstyle::SplitContainerStyle=SplitContainerStyle(): Style configuration\nstate::SplitContainerState=SplitContainerState(): State including split position and interactions\non_state_change::Function=() -> nothing: Callback for state changes (including split position)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.IconButton-Tuple{String}","page":"API Reference","title":"Fugl.IconButton","text":"A button consisting of the icon only.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.IntrinsicSize","page":"API Reference","title":"Fugl.IntrinsicSize","text":"IntrinsicSize(child::AbstractView=EmptyView())\n\nThe IntrinsicSize component is used to wrap a child view and ensure that it uses its intrinsic size for layout. This is useful for components that should not stretch to fill their parent container, but rather use their natural size.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.NumberField","page":"API Reference","title":"Fugl.NumberField","text":"NumberField(\n    state::EditorState=EditorState();\n    type::Type=Float64,\n    on_state_change::Function=(new_state::EditorState) -> nothing,\n    on_change::Function=(new_text) -> nothing\n)\n\nForm field for entering numbers. New values are parsed on focus loss.\n\nArguments\n\nstate::EditorState: Initial state of the text box.\ntype::Type: The numeric type to parse the input as (default is Float64).\non_state_change::Function: Callback for when the state changes. Must update a state ref or similar.\non_change::Function: Optional callback for when the text changes. Passes the new value in specified type.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.TextButton-Tuple{String}","page":"API Reference","title":"Fugl.TextButton","text":"A button containing text only.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.VerticalSplitContainer-Tuple{AbstractView, AbstractView}","page":"API Reference","title":"Fugl.VerticalSplitContainer","text":"VerticalSplitContainer(top, bottom; kwargs...)\n\nCreate a vertical split container with top and bottom child components.\n\nArguments\n\ntop::AbstractView: Top child component\nbottom::AbstractView: Bottom child component\nstyle::SplitContainerStyle=SplitContainerStyle(): Style configuration\nstate::SplitContainerState=SplitContainerState(): State including split position and interactions\non_state_change::Function=() -> nothing: Callback for state changes (including split position)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.add_glyph_to_batch!-Tuple{Fugl.GlyphBatch, Vararg{Float32, 8}}","page":"API Reference","title":"Fugl.add_glyph_to_batch!","text":"Add a single glyph to the batch. This is much more efficient than individual rendering.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_clipboard_action!-Tuple{EditorState, Fugl.ClipboardAction}","page":"API Reference","title":"Fugl.apply_clipboard_action!","text":"Apply clipboard action (placeholder for now).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_clipboard_action-Tuple{EditorState, Fugl.ClipboardAction}","page":"API Reference","title":"Fugl.apply_clipboard_action","text":"Apply clipboard action. Returns a new EditorState (placeholder implementation).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_delete_text!-Tuple{EditorState, Fugl.DeleteText}","page":"API Reference","title":"Fugl.apply_delete_text!","text":"Apply delete text action.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_delete_text-Tuple{EditorState, Fugl.DeleteText}","page":"API Reference","title":"Fugl.apply_delete_text","text":"Apply text deletion action. Returns a new EditorState with the text deleted.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_editor_action-Tuple{EditorState, Fugl.EditorAction}","page":"API Reference","title":"Fugl.apply_editor_action","text":"Apply an editor action to the editor state. Returns a new EditorState with the action applied.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_insert_text-Tuple{EditorState, Fugl.InsertText}","page":"API Reference","title":"Fugl.apply_insert_text","text":"Apply text insertion action. Returns a new EditorState with the text inserted.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_layout-Tuple{AbstractView}","page":"API Reference","title":"Fugl.apply_layout","text":"apply_layout(component::AbstractView)\n\nApply layout to a GUI component and its children. This function calculates and applies the layout to components. The interpret_view function then uses the positions and sizes calculated by this function.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_move_cursor!-Tuple{EditorState, Fugl.MoveCursor}","page":"API Reference","title":"Fugl.apply_move_cursor!","text":"Apply cursor movement action.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_move_cursor-Tuple{EditorState, Fugl.MoveCursor}","page":"API Reference","title":"Fugl.apply_move_cursor","text":"Apply cursor movement action. Returns a new EditorState with the cursor moved.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.char_callback-Tuple{Any, Any, InputState}","page":"API Reference","title":"Fugl.char_callback","text":"New character callback for proper text input This function handles character input from the keyboard, converting Unicode codepoints to characters.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.char_length-Tuple{AbstractString}","page":"API Reference","title":"Fugl.char_length","text":"Get the character length of a string (not byte length).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clear_batch!-Tuple{Fugl.GlyphBatch}","page":"API Reference","title":"Fugl.clear_batch!","text":"Clear all data from a glyph batch to reuse it.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clear_glyph_atlas!-Tuple{}","page":"API Reference","title":"Fugl.clear_glyph_atlas!","text":"clear_glyph_atlas!()\n\nClear the global glyph atlas cache and any associated batches.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clear_text_batch!-Tuple{}","page":"API Reference","title":"Fugl.clear_text_batch!","text":"Clear the global text batch to free memory.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.create_glyph_atlas","page":"API Reference","title":"Fugl.create_glyph_atlas","text":"create_glyph_atlas(width=4096, height=4096) -> GlyphAtlas\n\nCreate a new glyph atlas texture with larger size for better performance. Inspired by Makie.jl's approach with larger atlases to reduce cache misses.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.delete_range!-Tuple{EditorState, Fugl.CursorPosition, Fugl.CursorPosition}","page":"API Reference","title":"Fugl.delete_range!","text":"Delete text between two cursor positions.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.detect_click-Tuple{Fugl.CodeEditorView, InputState, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.detect_click","text":"Detect click events and handle focus and cursor positioning.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.detect_click-Tuple{Fugl.TextBoxView, InputState, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.detect_click","text":"Detect click events and handle focus and cursor positioning for TextBox.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_axes-Tuple{Fugl.Rect2f, Function, GeometryBasics.Vec{4, Float32}, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_axes","text":"Draw axes (x and y axis lines) using the enhanced line shader\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_axes_with_labels-Tuple{Fugl.Rect2f, Vector{Float32}, Vector{Float32}, Function, Fugl.Rect2f, GeometryBasics.Vec{4, Float32}, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_axes_with_labels","text":"Draw axes with labels and tick marks using both lines and Text components Axis lines, tick marks, and labels are positioned at plot edges (left/bottom), not at zero lines\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_closed_lines-Tuple{Vector{GeometryBasics.Point{2, Float32}}, Vec4{<:AbstractFloat}}","page":"API Reference","title":"Fugl.draw_closed_lines","text":"draw_closed_lines(vertices::Vector{Point2f}, color_rgba::Vec4{<:AbstractFloat})\n\nDraw closed lines using the provided vertices and color.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_cursor","page":"API Reference","title":"Fugl.draw_cursor","text":"Draw the cursor at the specified position.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.draw_glyph_atlas_debug-Tuple{Fugl.GlyphAtlas, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_glyph_atlas_debug","text":"draw_glyph_atlas_debug(atlas, x, y, scale, projection_matrix)\n\nDraw the entire glyph atlas texture to the screen for debugging purposes. This helps visualize what glyphs are actually stored in the atlas.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_glyph_from_atlas-Tuple{GLAbstraction.Texture, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}, GeometryBasics.Vec{4, Float32}}","page":"API Reference","title":"Fugl.draw_glyph_from_atlas","text":"draw_glyph_from_atlas(texture, x, y, width, height, u_min, v_min, u_max, v_max, projection_matrix, color)\n\nDraw a single glyph from the atlas texture with specified UV coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_grid-Tuple{Fugl.Rect2f, Vector{Float32}, Vector{Float32}, Function, GeometryBasics.Vec{4, Float32}, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_grid","text":"Draw a grid with specified parameters using the enhanced line shader\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_grid_with_labels-Tuple{Fugl.Rect2f, Vector{Float32}, Vector{Float32}, Function, Fugl.Rect2f, GeometryBasics.Vec{4, Float32}, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_grid_with_labels","text":"Draw a grid with axis lines using both enhanced line shader Grid lines and axis lines are positioned at plot edges (left/bottom), not at zero lines Labels are handled separately by drawaxeswith_labels\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_multiline_text_batched","page":"API Reference","title":"Fugl.draw_multiline_text_batched","text":"Multi-line batched text rendering that collects all lines into a single batch. This provides maximum performance for rendering multiple lines of text.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.draw_rectangle-Tuple{Vector{GeometryBasics.Point{2, Float32}}, Vec4{<:AbstractFloat}, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_rectangle","text":"draw_rectangle(vertices::Vector{Point2f}, color_rgba::Vec4{<:AbstractFloat}, projection_matrix::Mat4{Float32})\n\nDraw a rectangle using the provided vertices and color.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_rounded_rectangle-Tuple{Vector{GeometryBasics.Point{2, Float32}}, Float32, Float32, Vec4{<:AbstractFloat}, Vec4{<:AbstractFloat}, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_rounded_rectangle","text":"draw_rounded_rectangle(\n    vertices::Vector{Point2f},\n    width::Float32, height::Float32,\n    fill_color_rgba::Vec4{<:AbstractFloat}, border_color_rgba::Vec4{<:AbstractFloat},\n    border_width::Float32, radius::Float32,\n    projection_matrix::Mat4{Float32}\n)\n\nDraw a rounded rectangle with border using the custom shader.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_text_batched","page":"API Reference","title":"Fugl.draw_text_batched","text":"Optimized batched text rendering function that collects all glyphs first, then renders them in a single draw call. Much faster for large amounts of text.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.find_word_boundary-Tuple{EditorState, Fugl.CursorPosition, Symbol}","page":"API Reference","title":"Fugl.find_word_boundary","text":"Find word boundary for word-based movement.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.generate_rectangle_vertices-NTuple{4, Any}","page":"API Reference","title":"Fugl.generate_rectangle_vertices","text":"generate_rectangle_vertices(x, y, width, height)\n\nFunction to generate a rectangle with specified position and size in pixel coordinates.\n\nThis function creates a rectangle defined by its top-left corner (x, y), width, and height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.generate_tick_positions","page":"API Reference","title":"Fugl.generate_tick_positions","text":"Generate reasonable tick positions for a given range\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.get_font_hash-Tuple{FreeTypeAbstraction.FTFont}","page":"API Reference","title":"Fugl.get_font_hash","text":"get_font_hash(font::FreeTypeAbstraction.FTFont) -> UInt64\n\nGet a unique hash for a font face.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_glyph_atlas-Tuple{}","page":"API Reference","title":"Fugl.get_glyph_atlas","text":"get_glyph_atlas() -> GlyphAtlas\n\nGet the global glyph atlas, creating it if it doesn't exist.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_line_tokenized-Tuple{EditorState, Int64, AbstractString}","page":"API Reference","title":"Fugl.get_line_tokenized","text":"Get tokenization data for the given line, using cache if available. Returns the LineTokenData for the line.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_lines-Tuple{EditorState}","page":"API Reference","title":"Fugl.get_lines","text":"Get the lines of text from the editor state.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_or_insert_glyph!-Tuple{Fugl.GlyphAtlas, FreeTypeAbstraction.FTFont, Char, Int64}","page":"API Reference","title":"Fugl.get_or_insert_glyph!","text":"get_or_insert_glyph!(atlas::GlyphAtlas, font, char, pixelsize) -> GlyphUV\n\nGet glyph UV coordinates from atlas, inserting the glyph if not present.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_orthographic_matrix-Union{Tuple{T}, NTuple{6, T}} where T<:Real","page":"API Reference","title":"Fugl.get_orthographic_matrix","text":"get_orthographic_matrix(left::T, right::T, bottom::T, top::T, near::T, far::T)::Matrix{T} where {T<:Real}\n\nCreate an orthographic projection matrix.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.handle_key_input-Tuple{Fugl.TextBoxView, InputState}","page":"API Reference","title":"Fugl.handle_key_input","text":"Handle key input for TextBox (same as CodeEditor but without syntax highlighting).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.initialize_plot_shaders-Tuple{}","page":"API Reference","title":"Fugl.initialize_plot_shaders","text":"Initialize the plot shader programs (must be called after OpenGL context is created)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.initialize_shaders-Tuple{}","page":"API Reference","title":"Fugl.initialize_shaders","text":"Initialize the shader program (must be called after OpenGL context is created)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.interpret_view-Tuple{AbstractView, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.interpret_view","text":"interpret_view(component::AbstractView, x::Float32, y::Float32, width::Float32, height::Float32, projection_matrix::Mat4{Float32})\n\nInterpret the view of a GUI component. This function is responsible for interpreting the view of a GUI component based on its layout and properties.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.key_callback-Tuple{Any, Any, Any, Any, Any, InputState}","page":"API Reference","title":"Fugl.key_callback","text":"Alternative signature in case GLFW passes Char directly This function adds a character directly to the key buffer.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.key_event_to_action-Tuple{KeyEvent}","page":"API Reference","title":"Fugl.key_event_to_action","text":"Convert a GLFW key event to an EditorAction.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure-Tuple{Fugl.TextView}","page":"API Reference","title":"Fugl.measure","text":"measure(view::TextView)::Tuple{Float32,Float32}\n\nAssumes all text is rendered in a single line.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_fps_overlay-Tuple{Int64, Float64, Float32, Float32, Any}","page":"API Reference","title":"Fugl.render_fps_overlay","text":"render_fps_overlay(frame_count, fps, screen_width, screen_height, projection_matrix)\n\nRender debug overlay showing frame count and FPS in the upper right corner.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_glyph_batch!-Tuple{Fugl.GlyphBatch, GLAbstraction.Texture, StaticArraysCore.SMatrix{4, 4, Float32, 16}, GeometryBasics.Vec{4, Float32}}","page":"API Reference","title":"Fugl.render_glyph_batch!","text":"Render all glyphs in the batch with a single draw call. This is dramatically faster than individual glyph rendering.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_line_from_cache-Tuple{Fugl.LineTokenData, Any, Float32, Float32, Int64, Any}","page":"API Reference","title":"Fugl.render_line_from_cache","text":"Render a line using cached tokenization data with optimized batched rendering.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.run-Tuple{Function}","page":"API Reference","title":"Fugl.run","text":"run(ui_ref[]::AbstractView; title::String=\"Fugl\", window_width_px::Integer=1920, window_height_px::Integer=1080, fps_overlay::Bool=false)\n\nRun the main loop for the GUI application. This function handles the rendering and event processing for the GUI.\n\nArguments\n\nui_function::Function: Function that returns an AbstractView for the UI\ntitle::String=\"Fugl\": Window title\nwindow_width_px::Integer=1920: Initial window width\nwindow_height_px::Integer=1080: Initial window height\nfps_overlay::Bool=false: Show frame count and FPS in upper right corner\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.safe_substring-Tuple{AbstractString, Int64, Int64}","page":"API Reference","title":"Fugl.safe_substring","text":"Safely get a substring using character-based indexing instead of byte indexing. This handles Unicode characters correctly.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.safe_substring_to_end-Tuple{AbstractString, Int64}","page":"API Reference","title":"Fugl.safe_substring_to_end","text":"Safely get a substring from start to end of string using character indexing.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.tokenize_julia_line-Tuple{String}","page":"API Reference","title":"Fugl.tokenize_julia_line","text":"Tokenize a Julia line and return tokens with color data. Returns (tokens, tokendata) where tokendata is [(position, text, color), ...]\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.tokenize_line_with_colors-Tuple{String}","page":"API Reference","title":"Fugl.tokenize_line_with_colors","text":"Tokenize a line of code and return tokens with color data. Returns (tokens, tokendata) where tokendata is [(position, text, color), ...]\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.update_text-Tuple{EditorState, String}","page":"API Reference","title":"Fugl.update_text","text":"Update the text in the editor state and invalidate caches if needed. Returns a new EditorState with updated text.\n\n\n\n\n\n","category":"method"},{"location":"Components/text_button/#Text-Buttons","page":"Text Buttons","title":"Text Buttons","text":"","category":"section"},{"location":"Components/text_button/","page":"Text Buttons","title":"Text Buttons","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        TextButton(\"Some Text\", on_click=() -> println(\"Clicked\"))\n    )\nend\n\nscreenshot(MyApp, \"textButton.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text_button/","page":"Text Buttons","title":"Text Buttons","text":"(Image: Text Button)","category":"page"},{"location":"Components/plot/#Plot","page":"Plot","title":"Plot","text":"","category":"section"},{"location":"Components/plot/","page":"Plot","title":"Plot","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    # Generate sample data for demonstration\n    x_data = collect(0.0:0.1:10.0)\n    y1_data = sin.(x_data)\n    y2_data = cos.(x_data)\n    y3_data = sin.(x_data .* 2) .* 0.5\n\n    # Create multiple traces with different colors and styles\n    traces = [\n        LinePlotTrace(y1_data; x_data=x_data, \n                     color=Vec4{Float32}(0.2, 0.6, 0.8, 1.0), \n                     width=3.0f0, \n                     line_style=SOLID,\n                     label=\"sin(x)\"),\n        LinePlotTrace(y2_data; x_data=x_data, \n                     color=Vec4{Float32}(0.8, 0.2, 0.2, 1.0), \n                     width=2.5f0, \n                     line_style=DASH,\n                     label=\"cos(x)\"),\n        LinePlotTrace(y3_data; x_data=x_data, \n                     color=Vec4{Float32}(0.2, 0.8, 0.2, 1.0), \n                     width=2.0f0, \n                     line_style=DOT,\n                     label=\"0.5*sin(2x)\")\n    ]\n\n    IntrinsicColumn([\n        IntrinsicHeight(Container(Text(\"Plot Example\"))),\n        Container(\n            LinePlot(\n                traces;\n                style=LinePlotStyle(\n                    background_color=Vec4{Float32}(0.3, 0.3, 0.3, 1.0),  # Gray background\n                    grid_color=Vec4{Float32}(0.9, 0.9, 0.9, 1.0),        # Light gray grid\n                    axis_color=Vec4{Float32}(1.0, 1.0, 1.0, 1.0),        # White axes\n                    show_grid=true,\n                    show_axes=true,\n                    padding_px=50.0f0\n                )\n            )\n        ),\n    ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"linePlot.png\", 600, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/","page":"Plot","title":"Plot","text":"(Image: Line Plot)","category":"page"},{"location":"#Fugl.jl","page":"Fugl.jl","title":"Fugl.jl","text":"","category":"section"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"Fugl.jl is a functional GUI library written in Julia using OpenGL.","category":"page"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"It is intended to be a simple library with few depencdencies, suitable for making scientific applications.","category":"page"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"Fugl.jl has a short distance from component to shader, enabling fast and intuitive user interfaces.","category":"page"},{"location":"#Example","page":"Fugl.jl","title":"Example","text":"","category":"section"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    # Generate sample data for demonstration\n    x_data = collect(0.0:0.1:10.0)\n    y1_data = sin.(x_data)\n    y2_data = cos.(x_data)\n    y3_data = sin.(x_data .* 2) .* 0.5\n\n    # Create multiple traces with different colors and styles\n    traces = [\n        LinePlotTrace(y1_data; x_data=x_data, \n                     color=Vec4{Float32}(0.2, 0.6, 0.8, 1.0), \n                     width=3.0f0, \n                     line_style=SOLID,\n                     label=\"sin(x)\"),\n        LinePlotTrace(y2_data; x_data=x_data, \n                     color=Vec4{Float32}(0.8, 0.2, 0.2, 1.0), \n                     width=2.5f0, \n                     line_style=DASH,\n                     label=\"cos(x)\"),\n        LinePlotTrace(y3_data; x_data=x_data, \n                     color=Vec4{Float32}(0.2, 0.8, 0.2, 1.0), \n                     width=2.0f0, \n                     line_style=DOT,\n                     label=\"0.5*sin(2x)\")\n    ]\n\n    IntrinsicColumn([\n        IntrinsicHeight(Container(Text(\"Plot Example\"))),\n        Container(\n            LinePlot(\n                traces;\n                style=LinePlotStyle(\n                    background_color=Vec4{Float32}(0.3, 0.3, 0.3, 1.0),  # Gray background\n                    grid_color=Vec4{Float32}(0.9, 0.9, 0.9, 1.0),        # Light gray grid\n                    axis_color=Vec4{Float32}(1.0, 1.0, 1.0, 1.0),        # White axes\n                    show_grid=true,\n                    show_axes=true,\n                    padding_px=50.0f0\n                )\n            )\n        ),\n    ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"linePlot.png\", 600, 400);\nnothing #hide","category":"page"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"(Image: Line Plot)","category":"page"}]
}
