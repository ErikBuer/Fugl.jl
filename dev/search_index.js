var documenterSearchIndex = {"docs":
[{"location":"Components/row_col/#Row/Column","page":"Row/Column","title":"Row/Column","text":"","category":"section"},{"location":"Components/row_col/#Column","page":"Row/Column","title":"Column","text":"","category":"section"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"Column is a component for creating linear layout. Each child is given an equal part of the available height.","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        Column([\n            Container(),\n            Container(),\n            Container(),\n        ])\n    )\nend\n\nscreenshot(MyApp, \"column.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"(Image: Column example)","category":"page"},{"location":"Components/row_col/#Row","page":"Row/Column","title":"Row","text":"","category":"section"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"Row is a component for creating linear layout. Each child is given an equal part of the available width.","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"Note how we have omitted the vector in the Row argument. Either way is fine.","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        Row(\n            Container(),\n            Container(),\n            Container(),\n        )\n    )\nend\n\nscreenshot(MyApp, \"row.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"(Image: Row example)","category":"page"},{"location":"Components/row_col/#IntrinsicColumn","page":"Row/Column","title":"IntrinsicColumn","text":"","category":"section"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"The IntrinsicColumn component uses the children's intrinsic heights while distributing remaining space among flexible children.","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        IntrinsicColumn(\n            FixedSize(Container(Text(\"Clipping width\")), 900, 50),\n            FixedSize(Container(), 400, 50),\n            FixedSize(Container(), 200, 50),\n        )\n    )\nend\n\nscreenshot(MyApp, \"intrinsic_column.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"(Image: Intrinsic Column)","category":"page"},{"location":"Components/row_col/#IntrinsicRow","page":"Row/Column","title":"IntrinsicRow","text":"","category":"section"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"The IntrinsicRow component uses the children's intrinsic width while distributing remaining space among flexible children.","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        IntrinsicRow(\n            FixedSize(Container(Text(\"Clipping Height\")), 150, 900),\n            FixedSize(Container(), 150, 400),\n            FixedSize(Container(), 150, 200),\n        )\n    )\nend\n\nscreenshot(MyApp, \"intrinsic_row.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/row_col/","page":"Row/Column","title":"Row/Column","text":"(Image: Intrinsic row)","category":"page"},{"location":"Components/Card/#Card","page":"Card","title":"Card","text":"","category":"section"},{"location":"Components/Card/","page":"Card","title":"Card","text":"The Card component displays a title and content in a styled container, useful for quickly get a UI up an running.","category":"page"},{"location":"Components/Card/#Example","page":"Card","title":"Example","text":"","category":"section"},{"location":"Components/Card/","page":"Card","title":"Card","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Card(\n        \"Card Title\",\n        Text(\"Card contents\")\n    )\nend\n\nscreenshot(MyApp, \"card_example.png\", 812, 120);\nnothing #hide","category":"page"},{"location":"Components/Card/","page":"Card","title":"Card","text":"(Image: Card Example)","category":"page"},{"location":"Components/plot/01_line_plot/#Line-Plot","page":"Line Plot","title":"Line Plot","text":"","category":"section"},{"location":"Components/plot/01_line_plot/","page":"Line Plot","title":"Line Plot","text":"using Fugl\nusing Fugl: Text, LinePlotElement, SOLID, DASH, DOT\n\nfunction MyApp()\n    # Generate sample data for demonstration\n    x_data = collect(0.0:0.1:10.0)\n    y1_data = sin.(x_data)\n    y2_data = cos.(x_data)\n    y3_data = sin.(x_data .* 2) .* 0.5\n\n    # Create multiple plot elements with different colors and styles\n    elements = [\n        LinePlotElement(y1_data; x_data=x_data,\n            color=Vec4{Float32}(0.2, 0.6, 0.8, 1.0),\n            width=3.0f0,\n            line_style=SOLID,\n            )\n        LinePlotElement(y2_data; x_data=x_data,\n            color=Vec4{Float32}(0.8, 0.2, 0.2, 1.0),\n            width=2.5f0,\n            line_style=DASH,\n        )\n        LinePlotElement(y3_data; x_data=x_data,\n            color=Vec4{Float32}(0.2, 0.8, 0.2, 1.0),\n            width=2.0f0,\n            line_style=DOT,\n        )\n    ]\n\n    IntrinsicColumn([\n            IntrinsicHeight(Container(Text(\"Plot Example\"))),\n            Container(\n                Plot(\n                    elements,\n                    PlotStyle(\n                        background_color=Vec4{Float32}(0.3, 0.3, 0.3, 1.0),  # Gray background\n                        grid_color=Vec4{Float32}(0.9, 0.9, 0.9, 1.0),        # Light gray grid\n                        axis_color=Vec4{Float32}(1.0, 1.0, 1.0, 1.0),        # White axes\n                        show_grid=true,\n                        padding=54.0f0,\n                        x_label=\"Time (seconds)\",\n                        y_label=\"Amplitude\",\n                        show_x_label=true,\n                        show_y_label=true,\n                    )\n                )\n            ),\n        ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"linePlot.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/01_line_plot/","page":"Line Plot","title":"Line Plot","text":"(Image: Line Plot)","category":"page"},{"location":"Components/plot/01_line_plot/#Fixed-Axis-Bounds-Example","page":"Line Plot","title":"Fixed Axis Bounds Example","text":"","category":"section"},{"location":"Components/plot/01_line_plot/","page":"Line Plot","title":"Line Plot","text":"using Fugl\nusing Fugl: Text, LinePlotElement, SOLID\n\nfunction MyApp()\n    # Generate sample data that extends beyond our desired view\n    x_data = collect(-2.0:0.1:12.0)\n    y_data = sin.(x_data) .* exp.(-x_data ./ 10)\n\n    # Create plot element\n    elements = [\n        LinePlotElement(y_data; x_data=x_data,\n            color=Vec4{Float32}(0.0, 0.6, 0.9, 1.0),\n            width=2.5f0,\n            line_style=SOLID,\n        )\n    ]\n\n    IntrinsicColumn(\n        [\n            IntrinsicHeight(Container(Text(\"Fixed Axis Bounds Example\"))),\n            Container(\n                Plot(\n                    elements,\n                    PlotStyle(\n                        background_color=Vec4{Float32}(0.98, 0.98, 0.98, 1.0),\n                        grid_color=Vec4{Float32}(0.5, 0.5, 0.5, 1.0),\n                        axis_color=Vec4{Float32}(0.0, 0.0, 0.0, 1.0),\n                        show_grid=true,\n                        padding=50.0f0\n                    ),\n                    PlotState(\n                        # Only show x from 0 to 8, y from -0.8 to 1.0\n                        x_min=0.0f0,\n                        x_max=8.0f0,\n                        y_min=-0.8f0,\n                        y_max=1.0f0\n                    ),\n                )\n            ),\n            IntrinsicHeight(Container(Text(\"View: X=[0,8], Y=[-0.8,1.0] (data extends beyond view)\"))),\n        ], padding=0.0, spacing=0.0\n    )\nend\n\nscreenshot(MyApp, \"fixedBoundsPlot.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/01_line_plot/","page":"Line Plot","title":"Line Plot","text":"(Image: Fixed Bounds Plot)","category":"page"},{"location":"Components/plot/01_line_plot/#State-Management-Example","page":"Line Plot","title":"State Management Example","text":"","category":"section"},{"location":"Components/plot/01_line_plot/","page":"Line Plot","title":"Line Plot","text":"using Fugl\nusing Fugl: Text, TextButton, LinePlotElement, SOLID\n\nfunction MyApp()\n    # Generate sample data\n    x_data = collect(0.0:0.2:10.0)\n    y_data = sin.(x_data)\n\n    elements = AbstractPlotElement[\n        LinePlotElement(y_data; x_data=x_data,\n        color=Vec4{Float32}(0.8, 0.2, 0.6, 1.0),\n        width=3.0f0,\n        line_style=SOLID,\n        )\n    ]\n\n    # Create simple plot state for zoom control with initial view bounds\n    plot_state = Ref(PlotState())\n\n    # Define plot style with initial view\n    plot_style = PlotStyle(\n        background_color=Vec4{Float32}(0.95, 0.95, 0.95, 1.0),\n        grid_color=Vec4{Float32}(0.8, 0.8, 0.8, 1.0),\n        axis_color=Vec4{Float32}(0.0, 0.0, 0.0, 1.0),\n        show_grid=true,\n        padding=40.0f0\n    )\n\n    IntrinsicColumn([\n            IntrinsicHeight(Container(Text(\"State Management Example\"))),\n\n            # Plot with user-managed state - elements and bounds from state\n            Container(\n                Plot(\n                    elements,              # Elements define what to plot\n                    plot_style,            # Style defines visual appearance\n                    plot_state[],         # State contains bounds and zoom info  \n                    (new_state) -> plot_state[] = new_state\n                )\n            ),\n        ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"stateManagementPlot.png\", 812, 500);\nnothing #hide","category":"page"},{"location":"Components/plot/01_line_plot/","page":"Line Plot","title":"Line Plot","text":"(Image: State Management Plot)","category":"page"},{"location":"interaction/#User-interaction","page":"User interaction","title":"User interaction","text":"","category":"section"},{"location":"interaction/","page":"User interaction","title":"User interaction","text":"using Fugl\n\nfunction MyApp()\n    Container( on_click=() -> println(\"Clicked\") )\nend\nnothing #hide","category":"page"},{"location":"interaction/","page":"User interaction","title":"User interaction","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        TextButton(\"Some Text\", on_click=() -> println(\"Clicked\"))\n    )\nend\nnothing #hide","category":"page"},{"location":"interaction/","page":"User interaction","title":"User interaction","text":"using Fugl\n\n# Ref for maintining the slider state\nslider_value = Ref(0.5f0)\n\nfunction MyApp()\n    Container(\n        HorizontalSlider(\n            slider_value[],\n            0.0f0,              # min value\n            1.0f0;              # max value\n            on_change=(new_value) -> (slider_value[] = new_value)\n        )\n    )\nend\n\nnothing #hide","category":"page"},{"location":"Components/plot/06_plot_style/#PlotStyle","page":"PlotStyle","title":"PlotStyle","text":"","category":"section"},{"location":"Components/plot/06_plot_style/","page":"PlotStyle","title":"PlotStyle","text":"The PlotStyle struct provides control over the visual appearance of plots.","category":"page"},{"location":"Components/plot/06_plot_style/#Overview","page":"PlotStyle","title":"Overview","text":"","category":"section"},{"location":"Components/plot/06_plot_style/","page":"PlotStyle","title":"PlotStyle","text":"PlotStyle allows you to customize:","category":"page"},{"location":"Components/plot/06_plot_style/","page":"PlotStyle","title":"PlotStyle","text":"Background and grid colors\nIndividual axis line visibility (left, right, top, bottom)\nTick mark visibility (x and y axes independently)\nTick label visibility (x and y axes independently)\nGrid appearance\nAnti-aliasing settings","category":"page"},{"location":"Components/plot/06_plot_style/#Example:-Granular-Axis-Control","page":"PlotStyle","title":"Example: Granular Axis Control","text":"","category":"section"},{"location":"Components/plot/06_plot_style/","page":"PlotStyle","title":"PlotStyle","text":"This example demonstrates the flexibility of the granular axis control system:","category":"page"},{"location":"Components/plot/06_plot_style/","page":"PlotStyle","title":"PlotStyle","text":"using Fugl\nusing Fugl: Text\n\nfunction axis_control_demo()\n    # Create sample data\n    x_data = Float32.(0:0.2:4π)\n    y_data = Float32.(sin.(x_data))\n    line_element = LinePlotElement(y_data, x_data=x_data, color=Vec4{Float32}(0.0, 0.5, 1.0, 1.0))\n\n    # Demonstrate granular axis control options\n    plots = [\n        # 1. Standard plot (left and bottom axes only)\n        Plot([line_element], PlotStyle(\n            show_grid=false,\n            show_left_axis=true,\n            show_right_axis=false,\n            show_top_axis=false,\n            show_bottom_axis=true,\n            show_x_tick_marks=true,\n            show_y_tick_marks=true,\n            show_x_tick_labels=true,\n            show_y_tick_labels=true\n        )),\n\n        # 2. Box plot (all four axis lines)\n        Plot([line_element], PlotStyle(\n            show_grid=false,\n            show_left_axis=true,\n            show_right_axis=true,\n            show_top_axis=true,\n            show_bottom_axis=true,\n            show_x_tick_marks=true,\n            show_y_tick_marks=true,\n            show_x_tick_labels=true,\n            show_y_tick_labels=true\n        )),\n\n        # 3. Only tick marks (no axis lines, no labels)\n        Plot([line_element], PlotStyle(\n            show_grid=false,\n            show_left_axis=false,\n            show_right_axis=false,\n            show_top_axis=false,\n            show_bottom_axis=false,\n            show_x_tick_marks=true,\n            show_y_tick_marks=true,\n            show_x_tick_labels=false,\n            show_y_tick_labels=false\n        )),\n\n        # 4. Only tick labels (no axis lines, no tick marks)\n        Plot([line_element], PlotStyle(\n            show_grid=false,\n            show_left_axis=false,\n            show_right_axis=false,\n            show_top_axis=false,\n            show_bottom_axis=false,\n            show_x_tick_marks=false,\n            show_y_tick_marks=false,\n            show_x_tick_labels=true,\n            show_y_tick_labels=true\n        )),\n\n        # 5. Only axis lines (no tick marks, no labels)\n        Plot([line_element], PlotStyle(\n            show_grid=false,\n            show_left_axis=true,\n            show_right_axis=true,\n            show_top_axis=true,\n            show_bottom_axis=true,\n            show_x_tick_marks=false,\n            show_y_tick_marks=false,\n            show_x_tick_labels=false,\n            show_y_tick_labels=false\n        )),\n\n        # 6. Clean plot (nothing)\n        Plot([line_element], PlotStyle(\n            show_grid=false,\n            show_left_axis=false,\n            show_right_axis=false,\n            show_top_axis=false,\n            show_bottom_axis=false,\n            show_x_tick_marks=false,\n            show_y_tick_marks=false,\n            show_x_tick_labels=false,\n            show_y_tick_labels=false\n        ))\n    ]\n\n    labels = [\n        \"Standard (L+B)\",\n        \"Box (All axis lines)\",\n        \"Only tick marks\",\n        \"Only tick labels\",\n        \"Only axis lines\",\n        \"Clean plot\"\n    ]\n\n    # Create rows of plots\n    rows = AbstractView[]\n    for i in 1:2\n        row_plots = AbstractView[]\n        for j in 1:3\n            idx = (i - 1) * 3 + j\n            if idx <= length(plots)\n                push!(row_plots, IntrinsicColumn([\n                        IntrinsicHeight(Text(labels[idx], style=TextStyle(size_px=14))),\n                        plots[idx]\n                    ], spacing=0.0))\n            end\n        end\n        push!(rows, Row(row_plots, spacing=0.0))\n    end\n\n    ui = Container(\n        IntrinsicColumn([\n            IntrinsicHeight(Text(\"Granular Axis Control Examples\", style=TextStyle(size_px=20))),\n            Column(rows, spacing=0.0)\n        ], spacing=0.0, padding=0.0)\n    )\n\n    return ui\nend\n\n# Run the demo\nscreenshot(axis_control_demo, \"AxisControlDemo.png\", 812, 812);\nnothing #hide","category":"page"},{"location":"Components/plot/06_plot_style/","page":"PlotStyle","title":"PlotStyle","text":"(Image: Axis Control)","category":"page"},{"location":"Components/checkbox/#CheckBox","page":"CheckBox","title":"CheckBox","text":"","category":"section"},{"location":"Components/checkbox/","page":"CheckBox","title":"CheckBox","text":"The CheckBox component provides a boolean input control with an optional text label. It supports user-managed state through callbacks and offers comprehensive styling options.","category":"page"},{"location":"Components/checkbox/#Basic-Usage","page":"CheckBox","title":"Basic Usage","text":"","category":"section"},{"location":"Components/checkbox/","page":"CheckBox","title":"CheckBox","text":"The CheckBox requires user-managed state using a Ref{Bool} and provides callbacks for state changes.","category":"page"},{"location":"Components/checkbox/","page":"CheckBox","title":"CheckBox","text":"using Fugl\n\n# Checkbox state  \ncheckbox_state = Ref(false)\ncheckbox_state2 = Ref(true)\n\nfunction MyApp()\n    Card(\n        \"CheckBox Demo\",\n        Column(\n            CheckBox(\n                checkbox_state[];\n                label=\"Enable feature\",\n                on_change=(new_value) -> begin\n                    checkbox_state[] = new_value\n                    println(\"Checkbox is now: $(new_value)\")\n                end\n            ),\n            CheckBox(\n                checkbox_state2[];\n                label=\"Enable feature 2\",\n                on_change=(new_value) -> begin\n                    checkbox_state2[] = new_value\n                    println(\"Checkbox 2 is now: $(new_value)\")\n                end\n            )\n        )\n    )\nend\n\nscreenshot(MyApp, \"checkbox_basic.png\", 400, 120);\nnothing #hide","category":"page"},{"location":"Components/checkbox/","page":"CheckBox","title":"CheckBox","text":"(Image: Basic CheckBox)","category":"page"},{"location":"Components/checkbox/#Dark-Theme-Example","page":"CheckBox","title":"Dark Theme Example","text":"","category":"section"},{"location":"Components/checkbox/","page":"CheckBox","title":"CheckBox","text":"using Fugl\n\n# Checkbox states\ncheckbox_state3 = Ref(false)\ncheckbox_state4 = Ref(true)\n\n# Dark theme card style\ndark_card_style = ContainerStyle(\n    background_color=Vec4f(0.15, 0.15, 0.18, 1.0),  # Dark background\n    border_color=Vec4f(0.25, 0.25, 0.30, 1.0),      # Subtle border\n    border_width=1.5f0,\n    padding=12.0f0,\n    corner_radius=6.0f0,\n    anti_aliasing_width=1.0f0\n)\n\n# Dark theme title style\ndark_title_style = TextStyle(\n    size_px=18,\n    color=Vec4f(0.9, 0.9, 0.95, 1.0)  # Light text for titles\n)\n\n# Dark theme checkbox style\ndark_checkbox_style = CheckBoxStyle(\n    size=18.0f0,\n    background_color=Vec4f(0.08, 0.10, 0.14, 1.0),           # Dark unchecked background\n    background_color_checked=Vec4f(0.2, 0.6, 0.9, 1.0),      # Blue when checked\n    border_color=Vec4f(0.25, 0.25, 0.30, 1.0),               # Subtle border\n    border_width=1.0f0,\n    check_color=Vec4f(1.0, 1.0, 1.0, 1.0),                   # White checkmark\n    corner_radius=3.0f0,\n    padding=2.0f0,\n    label_style=TextStyle(size_px=14, color=Vec4f(0.9, 0.9, 0.95, 1.0))  # Light text\n)\n\nfunction MyDarkApp()\n    Card(\n        \"Dark Theme CheckBox Demo\",\n        Column(\n            CheckBox(\n                checkbox_state3[];\n                label=\"Enable dark mode feature\",\n                style=dark_checkbox_style,\n                on_change=(new_value) -> begin\n                    checkbox_state3[] = new_value\n                    println(\"Dark checkbox is now: $(new_value)\")\n                end\n            ),\n            CheckBox(\n                checkbox_state4[];\n                label=\"Use advanced settings\",\n                style=dark_checkbox_style,\n                on_change=(new_value) -> begin\n                    checkbox_state4[] = new_value\n                    println(\"Dark checkbox 2 is now: $(new_value)\")\n                end\n            )\n        ),\n        style=dark_card_style,\n        title_style=dark_title_style\n    )\nend\n\nscreenshot(MyDarkApp, \"checkbox_dark.png\", 400, 120);\nnothing #hide","category":"page"},{"location":"Components/checkbox/","page":"CheckBox","title":"CheckBox","text":"(Image: Dark Theme CheckBox)","category":"page"},{"location":"Components/icon_button/#IconButton","page":"IconButton","title":"IconButton","text":"","category":"section"},{"location":"Components/icon_button/","page":"IconButton","title":"IconButton","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        IconButton(\"../assets/julia_logo.png\",\n            on_click=() -> println(\"Icon clicked\")\n        )\n    )\nend\n\nscreenshot(MyApp, \"iconButton.png\", 200, 150);\nnothing #hide","category":"page"},{"location":"Components/icon_button/","page":"IconButton","title":"IconButton","text":"(Image: Icon Button)","category":"page"},{"location":"Components/slider/#Sliders","page":"Sliders","title":"Sliders","text":"","category":"section"},{"location":"Components/slider/","page":"Sliders","title":"Sliders","text":"using Fugl\n\n# Ref for maintining the slider state\nslider_value = Ref(0.5f0)\n\nfunction MyApp()\n    Container(\n        HorizontalSlider(\n            slider_value[],\n            0.0f0,              # min value\n            1.0f0;              # max value\n            on_change=(new_value) -> (slider_value[] = new_value)\n        )\n    )\nend\n\nscreenshot(MyApp, \"horizontal_slider.png\", 812, 100);\nnothing #hide","category":"page"},{"location":"Components/slider/","page":"Sliders","title":"Sliders","text":"(Image: Horizontal slider example)","category":"page"},{"location":"Components/vline_hline/#Separator-Lines","page":"Separator Lines","title":"Separator Lines","text":"","category":"section"},{"location":"Components/vline_hline/","page":"Separator Lines","title":"Separator Lines","text":"Separator lines are visual elements used to divide content in your UI.","category":"page"},{"location":"Components/vline_hline/#HLine","page":"Separator Lines","title":"HLine","text":"","category":"section"},{"location":"Components/vline_hline/","page":"Separator Lines","title":"Separator Lines","text":"Horizontal line separator that fills the available width.","category":"page"},{"location":"Components/vline_hline/","page":"Separator Lines","title":"Separator Lines","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        IntrinsicColumn([\n            IntrinsicHeight(Container(Text(\"Default Line\"))),\n            HLine(),  # Basic horizontal line\n            IntrinsicHeight(Container(Text(\"Oversize Line\"))),\n            HLine(style=SeparatorStyle(line_width=3.0f0, color=Vec4{Float32}(1.0f0, 0.2f0, 0.2f0, 1.0f0)), end_length=6.0f0),  # Thick red line\n        ],\n        padding=0.0f0, spacing=10.0f0)\n    )\nend\n\nscreenshot(MyApp, \"hline_example.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/vline_hline/","page":"Separator Lines","title":"Separator Lines","text":"(Image: HLine Example)","category":"page"},{"location":"Components/vline_hline/#VLine","page":"Separator Lines","title":"VLine","text":"","category":"section"},{"location":"Components/vline_hline/","page":"Separator Lines","title":"Separator Lines","text":"Vertical line separator that fills the available height.","category":"page"},{"location":"Components/vline_hline/","page":"Separator Lines","title":"Separator Lines","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        IntrinsicRow([\n            Container(Text(\"Undersized Line\")),\n            VLine(end_length=-10.0f0),  # Basic vertical line\n            Container(Text(\"Styled Line\")),\n            VLine(style=SeparatorStyle(line_width=3.0f0, color=Vec4{Float32}(0.2f0, 0.8f0, 0.2f0, 1.0f0))),  # Thick green line\n        ],\n        padding=0.0f0, spacing=10.0f0)\n    )\nend\n\nscreenshot(MyApp, \"vline_example.png\", 812, 200);\nnothing #hide","category":"page"},{"location":"Components/vline_hline/","page":"Separator Lines","title":"Separator Lines","text":"(Image: VLine Example)","category":"page"},{"location":"adding_shaders/#Adding-your-own-shaders","page":"Adding your own shaders","title":"Adding your own shaders","text":"","category":"section"},{"location":"adding_shaders/","page":"Adding your own shaders","title":"Adding your own shaders","text":"Fugl.jl provides a flexible system for external packages to register their own custom shaders. This allows you to create specialized rendering components while maintaining proper integration with Fugl's initialization system.","category":"page"},{"location":"adding_shaders/#Overview","page":"Adding your own shaders","title":"Overview","text":"","category":"section"},{"location":"adding_shaders/","page":"Adding your own shaders","title":"Adding your own shaders","text":"External packages can register shader initialization functions that will be called automatically when Fugl initializes its OpenGL context. This ensures that your custom shaders are compiled and ready to use when your components need them.","category":"page"},{"location":"adding_shaders/#Basic-Usage","page":"Adding your own shaders","title":"Basic Usage","text":"","category":"section"},{"location":"adding_shaders/#1.-Create-your-shader-initialization-function","page":"Adding your own shaders","title":"1. Create your shader initialization function","text":"","category":"section"},{"location":"adding_shaders/","page":"Adding your own shaders","title":"Adding your own shaders","text":"using Fugl\nusing GLAbstraction\nconst GLA = GLAbstraction\n\n# Define your shaders\nconst my_vertex_shader = GLA.vert\"\"\"\n#version 330 core\nlayout(location = 0) in vec2 position;\nlayout(location = 1) in vec4 color;\n\nout vec4 v_color;\nuniform mat4 projection;\n\nvoid main() {\n    gl_Position = projection * vec4(position, 0.0, 1.0);\n    v_color = color;\n}\n\"\"\"\n\nconst my_fragment_shader = GLA.frag\"\"\"\n#version 330 core\nin vec4 v_color;\nout vec4 FragColor;\n\nvoid main() {\n    FragColor = v_color;\n}\n\"\"\"\n\n# Global references to store compiled programs\nconst my_program = Ref{GLA.Program}()\n\n# Initialization function\nfunction initialize_my_shaders()\n    my_program[] = GLA.Program(my_vertex_shader, my_fragment_shader)\n    @info \"My custom shaders initialized successfully\"\nend","category":"page"},{"location":"adding_shaders/#2.-Register-your-initialization-function","page":"Adding your own shaders","title":"2. Register your initialization function","text":"","category":"section"},{"location":"adding_shaders/","page":"Adding your own shaders","title":"Adding your own shaders","text":"In your package's __init__() function:","category":"page"},{"location":"adding_shaders/","page":"Adding your own shaders","title":"Adding your own shaders","text":"function __init__()\n    Fugl.register_shader_initializer!(initialize_my_shaders)\nend","category":"page"},{"location":"adding_shaders/#3.-Use-your-shaders-in-components","page":"Adding your own shaders","title":"3. Use your shaders in components","text":"","category":"section"},{"location":"adding_shaders/","page":"Adding your own shaders","title":"Adding your own shaders","text":"function my_custom_render_function()\n    # Your shaders are now available\n    GLA.bind(my_program[])\n    # ... render your custom content\nend","category":"page"},{"location":"Components/number_field/#NumberField","page":"NumberField","title":"NumberField","text":"","category":"section"},{"location":"Components/number_field/","page":"NumberField","title":"NumberField","text":"The NumberField component provides type-safe numeric input with automatic parsing and validation. It extends the TextBox functionality to handle numeric types like Int, Float32, Float64, etc.","category":"page"},{"location":"Components/number_field/","page":"NumberField","title":"NumberField","text":"using Fugl\n\nfunction MyApp()\n    # Store EditorState instead of values\n    int_state = Ref(EditorState(\"42\"))\n    float_state = Ref(EditorState(\"123.45\"))\n\n    IntrinsicColumn([\n        IntrinsicHeight(Container(Fugl.Text(\"NumberField Demo - Type Casting\"))),\n\n        # Integer field\n        Card(\n            \"Integer Field:\",\n            NumberField(\n                int_state[];\n                type=Int,\n                on_state_change=(new_state) -> int_state[] = new_state,\n                on_change=(new_value) -> println(\"Integer changed to: \", new_value, \" (type: \", typeof(new_value), \")\")\n            )\n        ),\n\n        # Float32 field\n        Card(\n            \"Float32 Field:\",\n            NumberField(\n                float_state[];\n                type=Float32,\n                on_state_change=(new_state) -> float_state[] = new_state,\n                on_change=(new_value) -> println(\"Float32 changed to: \", new_value, \" (type: \", typeof(new_value), \")\")\n            )\n        ),\n        Container(\n            IntrinsicColumn([\n                # Display current values - display the state text and parsed values\n                IntrinsicHeight(Fugl.Text(\"Current Values:\")),\n                IntrinsicHeight(Fugl.Text(\"Integer: $(int_state[].text)\")),\n                IntrinsicHeight(Fugl.Text(\"Float32: $(float_state[].text)\")),\n            ], padding=0.0, spacing=5.0)\n        )\n    ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"numberField.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/number_field/","page":"NumberField","title":"NumberField","text":"(Image: Number Field)","category":"page"},{"location":"Components/container/#Container","page":"Container","title":"Container","text":"","category":"section"},{"location":"Components/container/","page":"Container","title":"Container","text":"The most basic UI component.","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Fugl\n\nfunction MyApp()\n    Container()\nend\n\nscreenshot(MyApp, \"container.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Container)","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"You can add a child component to a cointainer, as such:","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        Container()\n    )\nend\n\nscreenshot(MyApp, \"container_child.png\", 400, 300);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Container)","category":"page"},{"location":"Components/container/#Style","page":"Container","title":"Style","text":"","category":"section"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Fugl\n\nmy_style = ContainerStyle(;\n    background_color=Vec4{Float32}(0.3f0, 0.7f0, 0.7f0, 1.0f0),\n    border_color=Vec4{Float32}(0.0f0, 0.0f0, 0.0f0, 1.0f0),\n    border_width=1.0f0,\n    padding=25.0f0,\n    corner_radius=25.0f0\n)\n\nmy_style2 = ContainerStyle(;\n    background_color=Vec4{Float32}(0.7f0, 0.3f0, 0.3f0, 1.0f0),\n    border_color=Vec4{Float32}(0.0f0, 0.0f0, 0.0f0, 1.0f0),\n    border_width=5.0f0,\n    corner_radius=25.0f0\n)\n\nfunction MyApp()\n    Container(\n        Container(\n            Container(; style=my_style2);\n            style=my_style\n        )\n    )\nend\n\nscreenshot(MyApp, \"container_style.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Container Style)","category":"page"},{"location":"Components/container/#Corner-Radius","page":"Container","title":"Corner Radius","text":"","category":"section"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        IntrinsicRow([\n            Container(; style=ContainerStyle(corner_radius=0.0f0)),\n            Container(; style=ContainerStyle(corner_radius=15.0f0)),\n            Container(; style=ContainerStyle(corner_radius=40.0f0))\n        ], spacing=20.0f0)\n    )\nend\n\nscreenshot(MyApp, \"container_corner_radius.png\", 812, 180);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Corner Radius Example)","category":"page"},{"location":"Components/container/#Border-Width","page":"Container","title":"Border Width","text":"","category":"section"},{"location":"Components/container/","page":"Container","title":"Container","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        IntrinsicRow([\n            Container(; style=ContainerStyle(border_width=0.0f0)),\n            Container(; style=ContainerStyle(border_width=4.0f0)),\n            Container(; style=ContainerStyle(border_width=10.0f0))\n        ], spacing=20.0f0)\n    )\nend\n\nscreenshot(MyApp, \"container_border_width.png\", 812, 180);\nnothing #hide","category":"page"},{"location":"Components/container/","page":"Container","title":"Container","text":"(Image: Border Width Example)","category":"page"},{"location":"Components/text_box/#TextBox","page":"TextBox","title":"TextBox","text":"","category":"section"},{"location":"Components/text_box/","page":"TextBox","title":"TextBox","text":"using Fugl\nusing Fugl: Text\n\ntext_box_state = Ref(EditorState(\"Enter your text here...\"))\n\nfunction MyApp()\n    Card(\n        \"Plain Text Box:\",\n        TextBox(\n            text_box_state[];\n            on_state_change=(new_state) -> text_box_state[] = new_state,\n            on_change=(new_text) -> println(\"Optional hook. Text is now: \", new_text[1:min(20, length(new_text))], \"...\")\n        )\n    )\nend\n\nscreenshot(MyApp, \"textBox.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/text_box/","page":"TextBox","title":"TextBox","text":"(Image: Text Box)","category":"page"},{"location":"Components/text_box/#Dark-Theme-Example","page":"TextBox","title":"Dark Theme Example","text":"","category":"section"},{"location":"Components/text_box/","page":"TextBox","title":"TextBox","text":"using Fugl\nusing Fugl: Text\n\ndark_text_box_state = Ref(EditorState(\"Dark theme text box...\"))\n\nfunction MyApp()\n    # Dark theme card style\n    dark_card_style = ContainerStyle(\n        background_color=Vec4f(0.15, 0.15, 0.18, 1.0),  # Dark background\n        border_color=Vec4f(0.25, 0.25, 0.30, 1.0),      # Subtle border\n        border_width=1.5f0,\n        padding=12.0f0,\n        corner_radius=6.0f0,\n        anti_aliasing_width=1.0f0\n    )\n\n    # Dark theme title style\n    dark_title_style = TextStyle(\n        size_px=18,\n        color=Vec4f(0.9, 0.9, 0.95, 1.0)  # Light text for titles\n    )\n    \n    # Dark theme text box style\n    dark_text_box_style = TextBoxStyle(\n        background_color_unfocused = Vec4f(0.08, 0.10, 0.14, 1.0),\n        background_color_focused = Vec4f(0.06, 0.08, 0.12, 1.0),\n        border_color = Vec4f(0.15, 0.18, 0.25, 1.0),\n        border_width = 1.5f0,\n        corner_radius = 6.0f0,\n        padding = 12.0f0,\n        cursor_color = Vec4f(1.0, 1.0, 1.0, 0.8),\n        selection_color = Vec4f(0.4, 0.6, 0.9, 0.5),\n        text_style = TextStyle(\n            color = Vec4f(0.9, 0.9, 0.95, 1.0),  # Light text\n            size_px = 16\n        )\n    )\n\n    Card(\n        \"Dark Theme Text Box:\",\n        TextBox(\n            dark_text_box_state[];\n            style = dark_text_box_style,\n            on_state_change=(new_state) -> dark_text_box_state[] = new_state,\n            on_change=(new_text) -> println(\"Dark text changed: \", new_text[1:min(20, length(new_text))], \"...\")\n        ),\n        style=dark_card_style,\n        title_style=dark_title_style\n    )\nend\n\nscreenshot(MyApp, \"dark_text_box.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/text_box/","page":"TextBox","title":"TextBox","text":"(Image: Dark Text Box)","category":"page"},{"location":"Components/padding/#Padding","page":"Padding","title":"Padding","text":"","category":"section"},{"location":"Components/padding/","page":"Padding","title":"Padding","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        Padding(TextButton(\"SomeText\"), 20.0f0),\n        style = ContainerStyle(padding = 0.0f0)\n    )\nend\n\nscreenshot(MyApp, \"padding.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/padding/","page":"Padding","title":"Padding","text":"(Image: Row example)","category":"page"},{"location":"Components/align/#Align","page":"Align","title":"Align","text":"","category":"section"},{"location":"Components/align/","page":"Align","title":"Align","text":"The alignment components allow you to position sized components within their containers.","category":"page"},{"location":"Components/align/#Horizontal-Alignment","page":"Align","title":"Horizontal Alignment","text":"","category":"section"},{"location":"Components/align/","page":"Align","title":"Align","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column(\n            AlignHorizontal(FixedSize(Container(Text(\"Left\")), 100, 50), :left),\n            AlignHorizontal(FixedSize(Container(Text(\"Center\")), 100, 50), :center),\n            AlignHorizontal(FixedSize(Container(Text(\"Right\")), 100, 50), :right),\n        )\n    )\nend\n\nscreenshot(MyApp, \"horizontal_alignment.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/align/","page":"Align","title":"Align","text":"(Image: Horizontal alignment example)","category":"page"},{"location":"Components/align/#Vertical-Alignment","page":"Align","title":"Vertical Alignment","text":"","category":"section"},{"location":"Components/align/","page":"Align","title":"Align","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Row(\n            AlignVertical(IntrinsicSize(Container(Text(\"Top\"))), :top),\n            AlignVertical(IntrinsicSize(Container(Text(\"Middle\"))), :middle),\n            AlignVertical(IntrinsicSize(Container(Text(\"Bottom\"))), :bottom),\n        )\n    )\nend\n\nscreenshot(MyApp, \"vertical_alignment.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/align/","page":"Align","title":"Align","text":"(Image: Vertical alignment example)","category":"page"},{"location":"Components/plot/07_plot_state/#PlotState","page":"PlotState","title":"PlotState","text":"","category":"section"},{"location":"Components/split_container/#SplitContainer","page":"SplitContainer","title":"SplitContainer","text":"","category":"section"},{"location":"Components/split_container/","page":"SplitContainer","title":"SplitContainer","text":"Split containers allow you to create resizable panels that users can adjust by dragging a handle between them. Fugl.jl provides both horizontal and vertical split containers with external state management for a clean, functional UI paradigm.","category":"page"},{"location":"Components/split_container/","page":"SplitContainer","title":"SplitContainer","text":"The SplitContainerState struct holds the split position and interaction state, while the on_state_change callback updates the external state reference when users drag the handle.","category":"page"},{"location":"Components/split_container/","page":"SplitContainer","title":"SplitContainer","text":"The SplitContainerStyle struct encapsulates visual appearance settings like handle thickness, colors, and minimum panel sizes, making it easy to create reusable style configurations across your application.","category":"page"},{"location":"Components/split_container/","page":"SplitContainer","title":"SplitContainer","text":"using Fugl\nusing Fugl: Text, SplitContainerState, SplitContainerStyle\n\nfunction MyApp()\n    # Create state refs for split containers\n    horizontal_split_state = Ref(SplitContainerState(split_position=0.3f0))  # Start with 30% for left panel\n    vertical_split_state = Ref(SplitContainerState(split_position=0.4f0))    # Start with 40% for top panel\n\n    # Create some simple content for the splits\n    left_content = Container(\n        Text(\"Click and drag the gray bar to resize!\")\n    )\n\n    right_content = Container(\n        Text(\"This side can be resized by dragging the splitter handle.\")\n    )\n\n    # Create horizontal split container - recreated each frame with current state\n    horizontal_split = HorizontalSplitContainer(\n        left_content,\n        right_content,\n        style=SplitContainerStyle(),\n        state=horizontal_split_state[],\n        on_state_change=(new_state) -> horizontal_split_state[] = new_state\n    )\n\n    # Create some content for vertical split\n    top_content = Container(\n        Text(\"This demonstrates vertical splitting\")\n    )\n\n    # Create main vertical split with horizontal split in bottom - recreated each frame with current state\n    main_split = VerticalSplitContainer(\n        top_content,\n        horizontal_split,\n        style=SplitContainerStyle(),\n        state=vertical_split_state[],\n        on_state_change=(new_state) -> vertical_split_state[] = new_state\n    )\n\n    return main_split\nend\n\nscreenshot(MyApp, \"split_containers.png\", 812, 600);\nnothing #hide","category":"page"},{"location":"Components/split_container/","page":"SplitContainer","title":"SplitContainer","text":"(Image: Split container example)","category":"page"},{"location":"Components/text/#Text","page":"Text","title":"Text","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Text(\"Some Text\")\n    )\nend\n\nscreenshot(MyApp, \"text.png\", 812, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text)","category":"page"},{"location":"Components/text/#Wrapping","page":"Text","title":"Wrapping","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"The Text component support wrapping by default.","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Text(\"Some strings may be too long to fit, and must be drawn over multiple lines.\")\n    )\nend\n\nscreenshot(MyApp, \"text_wrap.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text wrapping)","category":"page"},{"location":"Components/text/#Text-Clipping","page":"Text","title":"Text Clipping","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"By setting wrap_text=false, text will be rendered on a single line and clipped if it exceeds the container width, similar to VS Code's sidebar behavior.","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            Text(\"This text will wrap normally because wrap_text is true by default\", wrap_text=true),\n            Text(\"This very long text will be clipped instead of wrapping to multiple lines\", wrap_text=false)\n        ], spacing=10.0)\n    )\nend\n\nscreenshot(MyApp, \"text_clip.png\", 400, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text clipping vs wrapping)","category":"page"},{"location":"Components/text/#Horizontal-Alignement","page":"Text","title":"Horizontal Alignement","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column([\n            Text(\"Align left\",   horizontal_align=:left), \n            Text(\"Align center\", horizontal_align=:center), \n            Text(\"Align right\",  horizontal_align=:right)\n        ], padding=0.0, spacing=0.0);\n        style=ContainerStyle(;padding=0.0f0)\n    )\nend\n\nscreenshot(MyApp, \"text_align.png\", 812, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text horizontal alignement)","category":"page"},{"location":"Components/text/#Vertical-Alignement","page":"Text","title":"Vertical Alignement","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Row([\n            Text(\"Align top\",    vertical_align=:top), \n            Text(\"Align middle\", vertical_align=:middle), \n            Text(\"Align bottom\", vertical_align=:bottom)\n        ], padding=0.0, spacing=0.0);\n        style=ContainerStyle(;padding=0.0f0)\n    )\nend\n\nscreenshot(MyApp, \"text_vertical_align.png\", 812, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text vertical alignment)","category":"page"},{"location":"Components/text/#Word-Wrapping-with-Vertical-Alignment","page":"Text","title":"Word Wrapping with Vertical Alignment","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"Word wrapping also respects vertical alignment, centering or positioning the entire wrapped text block as a unit.","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Row([\n            Container(\n                Text(\"This long text will wrap to multiple lines and be aligned as a block at the top\", \n                     vertical_align=:top, horizontal_align=:center, wrap_text=true),\n                style=ContainerStyle(background_color=Vec4f(0.3, 0.3, 0.6, 1.0))\n            ),\n            Container(\n                Text(\"This long text will wrap to multiple lines and be centered as a complete block in the middle\", \n                     vertical_align=:middle, horizontal_align=:center, wrap_text=true),\n                style=ContainerStyle(background_color=Vec4f(0.6, 0.4, 0.4, 1.0))\n            ),\n            Container(\n                Text(\"This long text will wrap to multiple lines and be positioned as a block at the bottom\", \n                     vertical_align=:bottom, horizontal_align=:center, wrap_text=true),\n                style=ContainerStyle(background_color=Vec4f(0.4, 0.6, 0.4, 1.0))\n            )\n        ]),\n    )\nend\n\nscreenshot(MyApp, \"wrapped_vertical_align.png\", 600, 200);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Wrapped text vertical alignment)","category":"page"},{"location":"Components/text/#Text-Style","page":"Text","title":"Text Style","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"Style is handeled by the TextStyle struct.","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text\n\nmy_style = TextStyle(\n    # font_path=\"SomeFont.ttf\",\n    size_px=32,\n    color=Vec4f(0.1, 0.7, 0.7, 1.0), # RGBA\n)\n\n\nfunction MyApp()\n    Container(\n        Text(\"Some text\"; style=my_style)\n    )\nend\n\nscreenshot(MyApp, \"text_style.png\", 812, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text Style Example)","category":"page"},{"location":"Components/text/#Text-Rotation","page":"Text","title":"Text Rotation","text":"","category":"section"},{"location":"Components/text/","page":"Text","title":"Text","text":"Text can be rotated by wrapping it with the Rotate component. Positive angles rotate counter-clockwise.","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"using Fugl\nusing Fugl: Text, Rotate\n\nfunction MyApp()\n    Container(\n        Row([\n            Rotate(Text(\"0°\", horizontal_align=:center, vertical_align=:middle), rotation_degrees=0.0f0),\n            Rotate(Text(\"45°\", horizontal_align=:center, vertical_align=:middle), rotation_degrees=45.0f0),\n            Rotate(Text(\"90°\", horizontal_align=:center, vertical_align=:middle), rotation_degrees=90.0f0)\n        ], padding=20.0, spacing=20.0)\n    )\nend\n\nscreenshot(MyApp, \"text_rotation.png\", 300, 150);\nnothing #hide","category":"page"},{"location":"Components/text/","page":"Text","title":"Text","text":"(Image: Text Rotation Example)","category":"page"},{"location":"Components/dropdown/#Dropdown","page":"Dropdown","title":"Dropdown","text":"","category":"section"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"The Dropdown component provides a dropdown selection interface that allows users to choose from a list of options. It follows the same immutable state management pattern as other Fugl components.","category":"page"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"using Fugl\nusing Fugl: Text\n\n# Initialize dropdown state\noptions = [\"Small\", \"Medium\", \"Large\", \"Extra Large\"]\n# Create initial state using Ref for reactivity\ndropdown_state = Ref(DropdownState(options; selected_index=1, is_open=true)) # force it open for demonstration purposes.\n\n# Custom styling\ndropdown_style = DropdownStyle(\n    text_style=TextStyle(size_px=14.0f0),\n    corner_radius=6.0f0,\n    padding=12.0f0,\n    item_height_px=32.0f0,\n    max_visible_items=3\n)\n\nfunction MyApp()\n    return Card(\n        \"Dropdown example:\",\n        Dropdown(\n            dropdown_state[];\n            style=dropdown_style,\n            on_state_change=(new_state) -> dropdown_state[] = new_state,\n            on_select=(value, index) -> println(\"Selected: $value (index: $index)\")\n        )\n    )\nend\n\nscreenshot(MyApp, \"dropdown.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"(Image: Dropdown)","category":"page"},{"location":"Components/dropdown/#Dark-Theme-Example","page":"Dropdown","title":"Dark Theme Example","text":"","category":"section"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"using Fugl\nusing Fugl: Text\n\n# Initialize dark dropdown state\ndark_options = [\"Dark Small\", \"Dark Medium\", \"Dark Large\", \"Dark Extra Large\"]\ndark_dropdown_state = Ref(DropdownState(dark_options; selected_index=2, is_open=true)) # force it open for demonstration\n\n# Dark theme card style\ndark_card_style = ContainerStyle(\n    background_color=Vec4f(0.15, 0.15, 0.18, 1.0),  # Dark background\n    border_color=Vec4f(0.25, 0.25, 0.30, 1.0),      # Subtle border\n    border_width=1.5f0,\n    padding=12.0f0,\n    corner_radius=6.0f0,\n    anti_aliasing_width=1.0f0\n)\n\n# Dark theme title style\ndark_title_style = TextStyle(\n    size_px=18,\n    color=Vec4f(0.9, 0.9, 0.95, 1.0)  # Light text for titles\n)\n\n# Dark theme dropdown style\ndark_dropdown_style = DropdownStyle(\n    text_style=TextStyle(size_px=14, color=Vec4f(0.9, 0.9, 0.95, 1.0)),  # Light text\n    background_color=Vec4f(0.08, 0.10, 0.14, 1.0),                       # Very dark background\n    background_color_hover=Vec4f(0.12, 0.14, 0.18, 1.0),                 # Slightly lighter on hover\n    background_color_open=Vec4f(0.06, 0.08, 0.12, 1.0),                  # Even darker when open\n    border_color=Vec4f(0.15, 0.18, 0.25, 1.0),                           # Dark border with blue tone\n    border_width=1.5f0,\n    corner_radius=6.0f0,\n    padding=12.0f0,\n    arrow_color=Vec4f(0.9, 0.9, 0.95, 1.0),                              # Light arrow\n    item_height_px=32.0f0,\n    max_visible_items=3\n)\n\nfunction MyDarkApp()\n    return Card(\n        \"Dark Theme Dropdown:\",\n        Dropdown(\n            dark_dropdown_state[];\n            style=dark_dropdown_style,\n            on_state_change=(new_state) -> dark_dropdown_state[] = new_state,\n            on_select=(value, index) -> println(\"Dark selected: $value (index: $index)\")\n        ),\n        style=dark_card_style,\n        title_style=dark_title_style\n    )\nend\n\nscreenshot(MyDarkApp, \"dark_dropdown.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"(Image: Dark Dropdown)","category":"page"},{"location":"Components/dropdown/#IntrinsicColumn-with-Multiple-Dropdowns","page":"Dropdown","title":"IntrinsicColumn with Multiple Dropdowns","text":"","category":"section"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"\n# Initialize states for multiple dropdowns\nsize_options = [\"Small\", \"Medium\", \"Large\", \"Extra Large\"]\ncolor_options = [\"Red\", \"Green\", \"Blue\", \"Yellow\", \"Purple\"]\n\nsize_dropdown_state = Ref(DropdownState(size_options; selected_index=2))\ncolor_dropdown_state = Ref(DropdownState(color_options; selected_index=1))\n\n\n\nfunction MyColumnApp()\n    return Card(\n        \"Multiple Dropdowns in IntrinsicColumn:\",\n        IntrinsicColumn([\n            Dropdown(\n                size_dropdown_state[];\n                style=dark_dropdown_style,\n                placeholder_text=\"Select size...\",\n                on_state_change=(new_state) -> size_dropdown_state[] = new_state,\n                on_select=(value, index) -> println(\"Size selected: $value\")\n            ),\n            Dropdown(\n                color_dropdown_state[];\n                style=dark_dropdown_style,\n                placeholder_text=\"Select color...\",\n                on_state_change=(new_state) -> color_dropdown_state[] = new_state,\n                on_select=(value, index) -> println(\"Color selected: $value\")\n            )\n        ], spacing=8.0f0),\n        style=dark_card_style,\n        title_style=dark_title_style\n    )\nend\n\nscreenshot(MyColumnApp, \"dark_dropdown_column.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/dropdown/","page":"Dropdown","title":"Dropdown","text":"(Image: Dark Dropdown Column)","category":"page"},{"location":"Components/plot/03_scatter_plot/#Scatter-Plot","page":"Scatter Plot","title":"Scatter Plot","text":"","category":"section"},{"location":"Components/plot/03_scatter_plot/","page":"Scatter Plot","title":"Scatter Plot","text":"using Fugl\nusing Fugl: Text, ScatterPlotElement, CIRCLE, TRIANGLE, RECTANGLE\n\nfunction MyApp()\n    # Generate sample data for scatter plot\n    x_data = collect(1:10)\n    y1_data = rand(10) .* 5 .+ 2  # Random data between 2-7\n    y2_data = rand(10) .* 3 .+ 4  # Random data between 4-7\n    y3_data = rand(10) .* 4 .+ 1  # Random data between 1-5\n\n    # Create scatter plot elements with different marker types\n    elements = [\n        ScatterPlotElement(y1_data; x_data=x_data,\n                          fill_color=Vec4{Float32}(0.8, 0.2, 0.2, 0.8),\n                          border_color=Vec4{Float32}(0.5, 0.1, 0.1, 1.0),\n                          marker_size=8.0f0,\n                          border_width=2.0f0,\n                          marker_type=CIRCLE,\n        )\n        ScatterPlotElement(y2_data; x_data=x_data,\n                          fill_color=Vec4{Float32}(0.2, 0.8, 0.2, 0.8),\n                          border_color=Vec4{Float32}(0.1, 0.5, 0.1, 1.0),\n                          marker_size=8.0f0,\n                          border_width=2.0f0,\n                          marker_type=TRIANGLE,\n        )\n        ScatterPlotElement(y3_data; x_data=x_data,\n                          fill_color=Vec4{Float32}(0.2, 0.2, 0.8, 0.8),\n                          border_color=Vec4{Float32}(0.1, 0.1, 0.5, 1.0),\n                          marker_size=8.0f0,\n                          border_width=2.0f0,\n                          marker_type=RECTANGLE,\n        )\n    ]\n\n    IntrinsicColumn([\n        IntrinsicHeight(Container(Text(\"Scatter Plot Example\"))),\n        Container(\n            Plot(\n                elements,\n                PlotStyle(\n                    background_color=Vec4{Float32}(0.98, 0.98, 0.98, 1.0),  # Light background\n                    grid_color=Vec4{Float32}(0.5, 0.5, 0.5, 1.0),        # Gray grid\n                    axis_color=Vec4{Float32}(0.0, 0.0, 0.0, 1.0),           # Black axes\n                    show_grid=true,\n                    padding=50.0f0,\n                    anti_aliasing_width=1.5f0\n                )\n            )\n        ),\n    ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"scatterPlot.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/03_scatter_plot/","page":"Scatter Plot","title":"Scatter Plot","text":"(Image: Scatter Plot)","category":"page"},{"location":"Components/image/#Image","page":"Image","title":"Image","text":"","category":"section"},{"location":"Components/image/#Image-from-file","page":"Image","title":"Image from file","text":"","category":"section"},{"location":"Components/image/","page":"Image","title":"Image","text":"using Fugl\n\nfunction MyApp()\n    Card(\n        \"Image\", title_align=:center,\n        Image(\"../assets/julia_logo.png\")\n    )\nend\n\nscreenshot(MyApp, \"logo_image.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"(Image: Logo Image)","category":"page"},{"location":"Components/image/#Image-from-matrix","page":"Image","title":"Image from matrix","text":"","category":"section"},{"location":"Components/image/","page":"Image","title":"Image","text":"You can also load matrixes as images.","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"using Fugl\nusing ColorTypes\nusing FixedPointNumbers\n\nsize_x, size_y = 256, 256\n\nrgba_matrix = Matrix{RGBA{N0f8}}(undef, size_y, size_x)\ncenter_x, center_y = size_x / 2, size_y / 2\n\nfor j in 1:size_y\n    for i in 1:size_x\n        # Normalized coordinates from -1 to 1\n        x = (i - center_x) / (size_x / 2)\n        y = (j - center_y) / (size_y / 2)\n        \n        # Distance from center\n        r = sqrt(x^2 + y^2)\n        \n        # Angle for radial patterns\n        θ = atan(y, x)\n        \n        # Create a smooth radial gradient with subtle spiral pattern\n        intensity = exp(-r^2 / 0.8) * (1 + 0.3 * sin(6 * θ + 2 * r))\n        intensity = clamp(intensity, 0.0, 1.0)\n        \n        # Create appealing color gradients\n        red = intensity * 0.8 + 0.1\n        green = intensity * 0.4 + 0.2 * sin(4 * θ)\n        blue = intensity * 0.9 + 0.1 * cos(8 * θ)\n        \n        # Clamp and convert to N0f8\n        red = clamp(red, 0.0, 1.0)\n        green = clamp(green, 0.0, 1.0)  \n        blue = clamp(blue, 0.0, 1.0)\n        \n        rgba_matrix[j, i] = RGBA{N0f8}(red, green, blue, 1.0)\n    end\nend\n\n# Dark theme card style\ndark_card_style = ContainerStyle(\n    background_color=Vec4f(0.15, 0.15, 0.18, 1.0),  # Dark background\n    border_color=Vec4f(0.25, 0.25, 0.30, 1.0),      # Subtle border\n    border_width=1.5f0,\n    padding=12.0f0,\n    corner_radius=6.0f0,\n    anti_aliasing_width=1.0f0\n)\n\n# Dark theme title style\ndark_title_style = TextStyle(\n    size_px=18,\n    color=Vec4f(0.9, 0.9, 0.95, 1.0)  # Light text for titles\n)\n\nfunction MyApp()\n    Card(\n        \"Matrix Image - Dark Theme\", \n        title_align=:center,\n        Image(rgba_matrix),\n        style=dark_card_style,\n        title_style=dark_title_style\n    )\nend\n\nscreenshot(MyApp, \"matrix_image.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"(Image: Matrix as image)","category":"page"},{"location":"Components/image/#Intrinsic-Size-Example","page":"Image","title":"Intrinsic Size Example","text":"","category":"section"},{"location":"Components/image/","page":"Image","title":"Image","text":"Images naturally use their intrinsic size (original dimensions). You can wrap them in IntrinsicSize to ensure they maintain their natural proportions:","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Card(\n        \"Intrinsic Size - Original Dimensions\", title_align=:center,\n        IntrinsicSize(Image(\"../assets/julia_logo.png\"))\n    )\nend\n\nscreenshot(MyApp, \"intrinsic_image.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"(Image: Intrinsic Size Image)","category":"page"},{"location":"Components/image/#Fixed-Size-Example","page":"Image","title":"Fixed Size Example","text":"","category":"section"},{"location":"Components/image/","page":"Image","title":"Image","text":"You can control the exact size of images using FixedSize. The image will scale proportionally to fit within the specified dimensions:","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Row([\n        Card(\n            \"100x100\", title_align=:center,\n            FixedSize(Image(\"../assets/julia_logo.png\"), 100, 100)\n        ),\n        Card(\n            \"200x100\", title_align=:center,\n            FixedSize(Image(\"../assets/julia_logo.png\"), 200, 100)\n        ),\n        Card(\n            \"150x150\", title_align=:center,\n            FixedSize(Image(\"../assets/julia_logo.png\"), 150, 150)\n        )\n    ], spacing=0.0, padding = 0.0)\nend\n\nscreenshot(MyApp, \"fixed_size_images.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"(Image: Fixed Size Images)","category":"page"},{"location":"Components/image/#Alignment-Example","page":"Image","title":"Alignment Example","text":"","category":"section"},{"location":"Components/image/","page":"Image","title":"Image","text":"You can control how images are aligned within their containers using AlignVertical and AlignHorizontal:","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Row([\n        Card(\n            \"Top\", title_align=:center,\n            AlignVertical(\n                FixedSize(Image(\"../assets/julia_logo.png\"), 80, 80),\n                :top\n            )\n\n        ),\n        Card(\n            \"Middle\", title_align=:center,\n            AlignVertical(\n                FixedSize(Image(\"../assets/julia_logo.png\"), 80, 80),\n                :middle\n            )\n        ),\n        Card(\n            \"Bottom\", title_align=:center,\n            AlignVertical(\n                FixedSize(Image(\"../assets/julia_logo.png\"), 80, 80),\n                :bottom\n            )\n        )\n    ], spacing=00.0, padding=0.0)\nend\n\nscreenshot(MyApp, \"aligned_images.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"(Image: Aligned Images)","category":"page"},{"location":"Components/image/#Missing-Image-Example","page":"Image","title":"Missing Image Example","text":"","category":"section"},{"location":"Components/image/","page":"Image","title":"Image","text":"When an image path is empty or the file doesn't exist, a placeholder is shown:","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"using Fugl\n\nfunction MyApp()\n    Container(Image(\"\"))\nend\n\nscreenshot(MyApp, \"missing_image.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/image/","page":"Image","title":"Image","text":"(Image: Missing Image)","category":"page"},{"location":"Components/Rotate/#Rotate","page":"Rotate","title":"Rotate","text":"","category":"section"},{"location":"Components/Rotate/","page":"Rotate","title":"Rotate","text":"The Rotate component applies rotation transformations to any child component.","category":"page"},{"location":"Components/Rotate/","page":"Rotate","title":"Rotate","text":"using Fugl # hide\nusing Fugl: Text\n\nfunction MyApp()\n        Container(\n            Row([\n                    Text(\"Normal Text\"),\n                    Rotate(Text(\"90° Rotated Text\"), rotation_degrees=90.0f0),\n                    Rotate(Text(\"45° Rotated Text\"), rotation_degrees=45.0f0),\n                    Rotate(\n                        Container(\n                            Column([\n                                Text(\"Multi-line\"),\n                                Text(\"Rotated Container\")\n                            ]),\n                            style=ContainerStyle(\n                                background_color=Vec4{Float32}(0.2f0, 0.4f0, 0.6f0, 1.0f0),\n                                padding=10.0f0\n                            )\n                        ),\n                        rotation_degrees=30.0f0\n                    )\n                ], spacing=30.0, padding=20.0)\n        )\n    end\n\nscreenshot(MyApp, \"basic_rotation.png\", 812, 400)\nnothing # hide","category":"page"},{"location":"Components/Rotate/","page":"Rotate","title":"Rotate","text":"(Image: Basic rotation)","category":"page"},{"location":"Components/table/#Table","page":"Table","title":"Table","text":"","category":"section"},{"location":"Components/table/","page":"Table","title":"Table","text":"The Table component provides a flexible way to display tabular data with customizable styling, text wrapping, and clipping options.","category":"page"},{"location":"Components/table/#Basic-Table","page":"Table","title":"Basic Table","text":"","category":"section"},{"location":"Components/table/","page":"Table","title":"Table","text":"using Fugl\nusing Fugl: Table, TableStyle, Card\n\nfunction MyApp()\n    # Simple table data\n    headers = [\"Product\", \"Price\", \"Stock\"]\n    data = [\n        [\"Laptop\", \"999\", \"15\"],\n        [\"Mouse\", \"25\", \"50\"],\n        [\"Keyboard\", \"75\", \"30\"],\n        [\"Monitor\", \"299\", \"8\"]\n    ]\n    \n    # Create basic table\n    table = Table(headers, data)\n    \n    # Wrap in a card\n    Card(\"Basic Table Example\", table)\nend\n\nscreenshot(MyApp, \"table_basic.png\", 812, 400)\nnothing # hide","category":"page"},{"location":"Components/table/","page":"Table","title":"Table","text":"(Image: Basic Table)","category":"page"},{"location":"Components/table/#Styled-Table-with-Alternating-Row-Colors","page":"Table","title":"Styled Table with Alternating Row Colors","text":"","category":"section"},{"location":"Components/table/","page":"Table","title":"Table","text":"using Fugl\nusing Fugl: Table, TableStyle, TextStyle, Card\n\nfunction MyApp()\n    # Employee data\n    headers = [\"Name\", \"Department\", \"Status\"]\n    data = [\n        [\"Alice Johnson\", \"Engineering\", \"Active\"],\n        [\"Bob Smith\", \"Design\", \"Active\"],\n        [\"Carol Davis\", \"Management\", \"On Leave\"],\n        [\"David Wilson\", \"Engineering\", \"Active\"],\n        [\"Eve Brown\", \"Engineering\", \"Active\"],\n        [\"Frank Miller\", \"Design\", \"Active\"]\n    ]\n    \n    # Create styled table with alternating row colors\n    styled_table = Table(\n        headers, \n        data,\n        style=TableStyle(\n            header_background_color=Vec4f(0.8, 0.4, 0.2, 1.0),\n            header_text_style=TextStyle(size_px=16, color=Vec4f(1.0, 1.0, 1.0, 1.0)),\n            header_height=35.0f0,\n            \n            cell_background_color=Vec4f(1.0, 1.0, 1.0, 1.0),  # White for odd rows\n            cell_alternate_background_color=Vec4f(0.95, 0.95, 0.95, 1.0),  # Light gray for even rows\n            cell_text_style=TextStyle(size_px=14, color=Vec4f(0.0, 0.0, 0.0, 1.0)),\n            cell_height=30.0f0,\n            \n            show_grid=true,\n            grid_color=Vec4f(0.6, 0.6, 0.6, 1.0),\n            cell_padding=10.0f0,\n            \n            border_color=Vec4f(0.3, 0.3, 0.3, 1.0),\n            border_width=2.0f0\n        )\n    )\n    \n    Card(\"Styled Table with Colors\", styled_table)\nend\n\nscreenshot(MyApp, \"table_styled.png\", 812, 400)\nnothing # hide","category":"page"},{"location":"Components/table/","page":"Table","title":"Table","text":"(Image: Styled Table)","category":"page"},{"location":"Components/table/#Text-Clipping-and-Wrapping","page":"Table","title":"Text Clipping and Wrapping","text":"","category":"section"},{"location":"Components/table/","page":"Table","title":"Table","text":"using Fugl\nusing Fugl: Table, TableStyle, TextStyle, Card, IntrinsicColumn\n\nfunction MyApp()\n    # Data with long text content\n    headers = [\"Name\", \"Description\", \"Notes\"]\n    data = [\n        [\"Product A\", \"This is a very long description that will demonstrate text clipping with ellipsis\", \"Short note\"],\n        [\"Product B\", \"Another long description that exceeds the available cell width\", \"Another short note\"],\n        [\"Product C\", \"Yet another lengthy description for testing purposes\", \"Final note\"]\n    ]\n    \n    # Table with text clipping (no wrapping)\n    clipping_table = Table(\n        headers,\n        data,\n        style=TableStyle(\n            max_wrapped_rows=0,  # No wrapping - clip with ellipsis\n            header_background_color=Vec4f(0.8, 0.4, 0.2, 1.0),\n            header_text_style=TextStyle(size_px=14, color=Vec4f(1.0, 1.0, 1.0, 1.0)),\n            cell_height=30.0f0,\n            cell_padding=8.0f0,\n            show_grid=true\n        )\n    )\n    \n    # Table with text wrapping (max 2 rows)\n    wrapping_table = Table(\n        headers,\n        data,\n        style=TableStyle(\n            max_wrapped_rows=2,  # Allow up to 2 rows of wrapped text\n            header_background_color=Vec4f(0.2, 0.6, 0.4, 1.0),\n            header_text_style=TextStyle(size_px=14, color=Vec4f(1.0, 1.0, 1.0, 1.0)),\n            cell_height=50.0f0,  # Taller cells for wrapped text\n            cell_padding=8.0f0,\n            show_grid=true\n        )\n    )\n    \n    IntrinsicColumn([\n        Card(\"Text Clipping (max_wrapped_rows=0)\", clipping_table),\n        Card(\"Text Wrapping (max_wrapped_rows=2)\", wrapping_table)\n    ], spacing=10.0f0, padding=0.0f0)\nend\n\nscreenshot(MyApp, \"table_clipping.png\", 812, 600)\nnothing # hide","category":"page"},{"location":"Components/table/","page":"Table","title":"Table","text":"(Image: Text Clipping and Wrapping)","category":"page"},{"location":"Components/table/#Interactive-Table","page":"Table","title":"Interactive Table","text":"","category":"section"},{"location":"Components/table/","page":"Table","title":"Table","text":"using Fugl\nusing Fugl: Table, TableStyle, TextStyle, Card\n\nfunction MyApp()\n    # Interactive table data\n    headers = [\"ID\", \"Name\", \"Action\"]\n    data = [\n        [\"001\", \"Alice\", \"Edit\"],\n        [\"002\", \"Bob\", \"View\"],\n        [\"003\", \"Carol\", \"Delete\"],\n        [\"004\", \"David\", \"Edit\"]\n    ]\n    \n    # Create interactive table with click handling\n    interactive_table = Table(\n        headers,\n        data,\n        style=TableStyle(\n            header_background_color=Vec4f(0.4, 0.2, 0.6, 1.0),\n            header_text_style=TextStyle(size_px=15, color=Vec4f(1.0, 1.0, 1.0, 1.0)),\n            cell_background_color=Vec4f(0.99, 0.99, 0.99, 1.0),\n            cell_padding=12.0f0,\n            show_grid=true,\n            grid_color=Vec4f(0.7, 0.7, 0.7, 1.0)\n        ),\n        on_cell_click=(row, col) -> begin\n            println(\"Clicked row $row, column $col: $(data[row][col])\")\n        end\n    )\n    \n    Card(\"Interactive Table (Click cells to see console output)\", interactive_table)\nend\n\nscreenshot(MyApp, \"table_interactive.png\", 812, 400)\nnothing # hide","category":"page"},{"location":"Components/table/","page":"Table","title":"Table","text":"(Image: Interactive Table)","category":"page"},{"location":"Components/table/#Table-with-Custom-Column-Widths","page":"Table","title":"Table with Custom Column Widths","text":"","category":"section"},{"location":"Components/table/","page":"Table","title":"Table","text":"using Fugl\n\nfunction MyApp()\n    # Product data with varying content lengths\n    headers = [\"ID\", \"Product Name\", \"Description\", \"Price\"]\n    data = [\n        [\"1\", \"Laptop\", \"High-performance gaming laptop with RGB keyboard\", \"\\$1299\"],\n        [\"2\", \"Mouse\", \"Wireless optical mouse\", \"\\$29\"],\n        [\"3\", \"Monitor\", \"4K Ultra HD display\", \"\\$449\"],\n        [\"4\", \"Keyboard\", \"Mechanical gaming keyboard\", \"\\$129\"],\n        [\"5\", \"Headphones\", \"Noise-cancelling wireless headphones\", \"\\$199\"]\n    ]\n    \n    # Auto-sizing table (default behavior - no column widths specified)\n    auto_state = Ref(TableState())  # column_widths=nothing, so auto-calculate\n    \n    auto_table = Table(\n        headers,\n        data,\n        style=TableStyle(\n            header_background_color=Vec4f(0.2, 0.4, 0.8, 1.0),\n            header_text_style=TextStyle(size_px=14, color=Vec4f(1.0, 1.0, 1.0, 1.0)),\n            cell_padding=8.0f0,\n            show_grid=true\n        ),\n        state=auto_state[],\n        on_state_change=(new_state) -> auto_state[] = new_state\n    )\n    \n    # Custom column widths table\n    custom_state = Ref(TableState([50.0f0, 120.0f0, 300.0f0, 80.0f0]))  # Explicit widths\n    \n    custom_table = Table(\n        headers,\n        data,\n        style=TableStyle(\n            header_background_color=Vec4f(0.8, 0.2, 0.4, 1.0),\n            header_text_style=TextStyle(size_px=14, color=Vec4f(1.0, 1.0, 1.0, 1.0)),\n            cell_padding=8.0f0,\n            show_grid=true,\n            max_wrapped_rows=2  # Allow text wrapping in description column\n        ),\n        state=custom_state[],\n        on_state_change=(new_state) -> custom_state[] = new_state\n    )\n   \n    \n    IntrinsicColumn([\n        Card(\"Auto-sized Columns (TableState())\", auto_table),\n        Card(\"Custom Column Widths [50, 120, 300, 80]\", custom_table),\n    ], spacing=15.0f0, padding=0.0f0)\nend\n\nscreenshot(MyApp, \"table_state.png\", 812, 800)\nnothing # hide","category":"page"},{"location":"Components/table/","page":"Table","title":"Table","text":"(Image: Table with Custom Column Widths)","category":"page"},{"location":"Components/plot/02_stem_plot/#Stem-Plot","page":"Stem Plot","title":"Stem Plot","text":"","category":"section"},{"location":"Components/plot/02_stem_plot/","page":"Stem Plot","title":"Stem Plot","text":"using Fugl\nusing Fugl: Text, StemPlotElement, CIRCLE, TRIANGLE\n\nfunction MyApp()\n    # Generate sample data for stem plot\n    x_data = collect(1:8)\n    y1_data = [3.2, 5.1, 2.8, 6.3, 4.7, 3.9, 5.5, 4.2]\n    y2_data = [2.1, 3.8, 4.2, 2.9, 5.4, 4.1, 3.6, 4.8]\n\n    # Create stem plot elements\n    elements = [\n        StemPlotElement(y1_data; x_data=x_data,\n                       line_width=3.0f0,\n                       marker_size=6.0f0,\n                       border_width=1.5f0,\n                       marker_type=CIRCLE,\n                       baseline=0.0f0,\n        )\n        StemPlotElement(y2_data; x_data=x_data .+ 0.3,  # Offset x slightly for visibility\n                       line_color=Vec4{Float32}(0.3, 0.7, 0.3, 1.0),     # Green stems\n                       fill_color=Vec4{Float32}(0.3, 0.8, 0.3, 1.0),     # Green markers\n                       border_color=Vec4{Float32}(0.0, 0.3, 0.0, 1.0),   # Dark green border\n                       line_width=3.0f0,\n                       marker_size=6.0f0,\n                       border_width=1.5f0,\n                       marker_type=TRIANGLE,\n                       baseline=0.0f0,\n        )\n    ]\n\n    IntrinsicColumn([\n        IntrinsicHeight(Container(Text(\"Stem Plot Example\"))),\n        Container(\n            Plot(\n                elements,\n                PlotStyle(\n                    background_color=Vec4{Float32}(0.88f0, 0.875f0, 0.88f0, 1.0f0),\n                    grid_color=Vec4{Float32}(0.5, 0.5, 0.5, 1.0),\n                    axis_color=Vec4{Float32}(0.0, 0.0, 0.0, 1.0),           # Black axes\n                    show_grid=true,\n                    padding=50.0f0,\n                    anti_aliasing_width=1.5f0\n                )\n            )\n        ),\n    ], padding=0.0, spacing=0.0)\nend\n\nscreenshot(MyApp, \"stemPlot.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/02_stem_plot/","page":"Stem Plot","title":"Stem Plot","text":"(Image: Stem Plot)","category":"page"},{"location":"Components/plot/04_heatmap/#Heatmap","page":"Heatmap","title":"Heatmap","text":"","category":"section"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"using Fugl\nusing Fugl: Text, HeatmapElement\n\nfunction MyApp()\n    # Create test image data - 2D Gaussian pattern with waves\n    size_x, size_y = 30, 30\n    data = Matrix{Float32}(undef, size_y, size_x)\n    center_x, center_y = size_x / 2, size_y / 2\n\n    for j in 1:size_y\n        for i in 1:size_x\n            # Distance from center\n            dx = i - center_x\n            dy = j - center_y\n            distance_sq = dx^2 + dy^2\n\n            # Gaussian pattern\n            data[j, i] = exp(-distance_sq / (2 * (size_x / 6)^2))\n            \n            # Add sinusoidal pattern\n            wave = 0.3 * sin(i * 0.3) * cos(j * 0.3)\n            data[j, i] += wave\n\n            # Add some noise\n            data[j, i] += 0.1 * (rand() - 0.5)\n        end\n    end\n\n    # Create heatmap element with viridis colormap\n    elements = [\n        HeatmapElement(\n            data;\n            x_range=(0.0, 10.0),\n            y_range=(0.0, 10.0),\n            colormap=:viridis,\n        )\n    ]\n\n    Card(\n        \"Heatmap\",\n        Plot(\n            elements,\n            PlotStyle(\n                background_color=Vec4{Float32}(0.88f0, 0.875f0, 0.88f0, 1.0f0),\n                grid_color=Vec4{Float32}(0.5, 0.5, 0.5, 1.0),           # Gray grid\n                axis_color=Vec4{Float32}(0.0, 0.0, 0.0, 1.0),           # Black axes\n                show_grid=true,\n                padding=50.0f0\n            )\n        )\n    )\nend\n\nscreenshot(MyApp, \"heatmap.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"(Image: Heatmap)","category":"page"},{"location":"Components/plot/04_heatmap/#Available-Colormaps","page":"Heatmap","title":"Available Colormaps","text":"","category":"section"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"The HeatmapElement supports several built-in colormaps:","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":":viridis - Perceptually uniform colormap (purple to yellow)\n:plasma - High contrast colormap (purple to pink to yellow)  \n:hot - Classic hot colormap (black to red to yellow to white)\n:grayscale - Simple grayscale mapping","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"You can specify the colormap when creating a HeatmapElement:","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"HeatmapElement(data; colormap=:viridis)  # Default\nHeatmapElement(data; colormap=:plasma)   # High contrast\nHeatmapElement(data; colormap=:hot)      # Classic hot colors\nHeatmapElement(data; colormap=:grayscale) # Grayscale","category":"page"},{"location":"Components/plot/04_heatmap/#NaN-Value-Handling","page":"Heatmap","title":"NaN Value Handling","text":"","category":"section"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"All colormaps support proper NaN value handling. You can specify a custom color for NaN values using the nan_color parameter:","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"HeatmapElement(data; \n    colormap=:viridis,\n    nan_color=(1.0, 0.0, 1.0, 1.0)  # Magenta for NaN values\n)","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"NaN values in the data will be displayed in the specified nan_color regardless of which colormap is used, while valid data points will be colored according to the chosen colormap.","category":"page"},{"location":"Components/plot/04_heatmap/#Multiple-Colormaps-Example","page":"Heatmap","title":"Multiple Colormaps Example","text":"","category":"section"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"using Fugl\nusing Fugl: Text, HeatmapElement\n\nfunction MyApp()\n    # Create simple test data - radial pattern\n    size_x, size_y = 20, 20\n    data = Matrix{Float32}(undef, size_y, size_x)\n    \n    for j in 1:size_y\n        for i in 1:size_x\n            # Create radial pattern\n            x_norm = (i - size_x/2) / (size_x/2)\n            y_norm = (j - size_y/2) / (size_y/2)\n            radius = sqrt(x_norm^2 + y_norm^2)\n            data[j, i] = max(0.0f0, 1.0f0 - radius)\n        end\n    end\n\n    # Create heatmap elements with different colormaps\n    elements = [\n        HeatmapElement(\n            data;\n            x_range=(0.0, 5.0),\n            y_range=(0.0, 5.0),\n            colormap=:viridis,\n        ),\n        HeatmapElement(\n            data;\n            x_range=(6.0, 11.0),\n            y_range=(0.0, 5.0),\n            colormap=:plasma,\n        ),\n        HeatmapElement(\n            data;\n            x_range=(0.0, 5.0),\n            y_range=(6.0, 11.0),\n            colormap=:hot,\n        ),\n        HeatmapElement(\n            data;\n            x_range=(6.0, 11.0),\n            y_range=(6.0, 11.0),\n            colormap=:grayscale,\n        )\n    ]\n\n    Card(\n        \"Multiple Colormaps\",\n        Plot(\n            elements,\n            PlotStyle(\n                background_color=Vec4{Float32}(0.88f0, 0.875f0, 0.88f0, 1.0f0),\n                grid_color=Vec4{Float32}(0.5, 0.5, 0.5, 1.0),\n                axis_color=Vec4{Float32}(0.0, 0.0, 0.0, 1.0),\n                show_grid=true,\n                padding=50.0f0\n            )\n        )\n    )\nend\n\nscreenshot(MyApp, \"multipleColormaps.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"(Image: Multiple Colormaps)","category":"page"},{"location":"Components/plot/04_heatmap/#NaN-Values-Example","page":"Heatmap","title":"NaN Values Example","text":"","category":"section"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"The API support custom colors for NaN-values.","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"using Fugl\nusing Fugl: Text, HeatmapElement\n\nfunction MyApp()\n    # Create data with NaN values\n    size_x, size_y = 15, 15\n    data = Matrix{Float32}(undef, size_y, size_x)\n    \n    for j in 1:size_y\n        for i in 1:size_x\n            # Create pattern with some NaN regions\n            x_norm = (i - size_x/2) / (size_x/2)\n            y_norm = (j - size_y/2) / (size_y/2)\n            \n            if abs(x_norm) < 0.3 && abs(y_norm) < 0.3\n                data[j, i] = NaN32  # NaN in center region\n            else\n                data[j, i] = x_norm^2 + y_norm^2\n            end\n        end\n    end\n\n    elements = [\n        HeatmapElement(\n            data;\n            x_range=(0.0, 10.0),\n            y_range=(0.0, 10.0),\n            colormap=:viridis,\n            nan_color=(1.0, 0.0, 1.0, 1.0)  # Magenta for NaN\n        )\n    ]\n\n    Card(\n        \"NaN Values\",\n        Plot(\n            elements,\n            PlotStyle(\n                background_color=Vec4{Float32}(0.88f0, 0.875f0, 0.88f0, 1.0f0),\n                show_grid=true,\n                padding=50.0f0\n            )\n        )\n    )\nend\n\nscreenshot(MyApp, \"nanValues.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"(Image: NaN Values)","category":"page"},{"location":"Components/plot/04_heatmap/#Grayscale-NaN-Example","page":"Heatmap","title":"Grayscale NaN Example","text":"","category":"section"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"You can also have a colored NaN cell in grayscale plots.","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"using Fugl\nusing Fugl: Text, HeatmapElement\n\nfunction MyApp()\n    # Create grayscale data with NaN cross pattern\n    size_x, size_y = 12, 12\n    data = Matrix{Float32}(undef, size_y, size_x)\n    \n    for j in 1:size_y\n        for i in 1:size_x\n            # Create NaN cross pattern in the middle\n            if i == 6 || j == 6\n                data[j, i] = NaN32\n            else\n                # Create simple gradient\n                data[j, i] = Float32((i + j) / (size_x + size_y))\n            end\n        end\n    end\n\n    elements = [\n        HeatmapElement(\n            data;\n            x_range=(0.0, 10.0),\n            y_range=(0.0, 10.0),\n            colormap=:grayscale,\n            nan_color=(1.0, 0.0, 1.0, 1.0)  # Magenta for NaN\n        )\n    ]\n\n    Card(\n        \"Grayscale with NaN Cross\",\n        Plot(\n            elements,\n            PlotStyle(\n                background_color=Vec4{Float32}(0.88f0, 0.875f0, 0.88f0, 1.0f0),\n                show_grid=true,\n                padding=50.0f0\n            )\n        )\n    )\nend\n\nscreenshot(MyApp, \"grayscaleNaN.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"(Image: Grayscale NaN)","category":"page"},{"location":"Components/plot/04_heatmap/#Checkerboard-Example","page":"Heatmap","title":"Checkerboard Example","text":"","category":"section"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"using Fugl\nusing Fugl: Text, HeatmapElement\n\nfunction MyApp()\n    # Create checkerboard pattern\n    size_x, size_y = 20, 20\n    data = Float32[mod(i+j, 2) == 0 ? 1.0 : 0.0 for i in 1:size_y, j in 1:size_x]\n\n    elements = [\n        HeatmapElement(\n            data;\n            x_range=(0.0, 10.0),\n            y_range=(0.0, 10.0),\n            colormap=:hot,\n        )\n    ]\n\n    Card(\n        \"Checkerboard\",\n        Plot(\n            elements,\n            PlotStyle(\n                background_color=Vec4{Float32}(0.88f0, 0.875f0, 0.88f0, 1.0f0),\n                show_grid=true,\n                padding=50.0f0\n            )\n        )\n    )\nend\n\nscreenshot(MyApp, \"checkerboard.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"(Image: Checkerboard)","category":"page"},{"location":"Components/plot/04_heatmap/#No-Axes-Example","page":"Heatmap","title":"No Axes Example","text":"","category":"section"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"using Fugl\nusing Fugl: Text, HeatmapElement\n\nfunction MyApp()\n    # Create spiral pattern\n    size_x, size_y = 25, 25\n    data = Matrix{Float32}(undef, size_y, size_x)\n    \n    for j in 1:size_y\n        for i in 1:size_x\n            x_norm = (i - size_x/2) / (size_x/2)\n            y_norm = (j - size_y/2) / (size_y/2)\n            angle = atan(y_norm, x_norm)\n            radius = sqrt(x_norm^2 + y_norm^2)\n            data[j, i] = sin(angle * 3 + radius * 8) * exp(-radius)\n        end\n    end\n\n    elements = [\n        HeatmapElement(\n            data;\n            x_range=(0.0, 10.0),\n            y_range=(0.0, 10.0),\n            colormap=:plasma,\n        )\n    ]\n\n    Card(\n        \"No Axes\",\n        Plot(\n            elements,\n            PlotStyle(\n                background_color=Vec4{Float32}(0.88f0, 0.875f0, 0.88f0, 1.0f0),\n                show_grid=false,\n                show_left_axis=false,\n                show_right_axis=false,\n                show_top_axis=false,\n                show_bottom_axis=false,\n                show_x_tick_marks=false,\n                show_y_tick_marks=false,\n                show_x_tick_labels=false,\n                show_y_tick_labels=false,\n                padding=10.0f0\n            )\n        )\n    )\nend\n\nscreenshot(MyApp, \"noAxes.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/plot/04_heatmap/","page":"Heatmap","title":"Heatmap","text":"(Image: No Axes)","category":"page"},{"location":"Components/plot/05_colorbar/#Colorbar","page":"Colorbar","title":"Colorbar","text":"","category":"section"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"Colorbars provide a visual representation of the mapping between data values and colors in heatmaps and other color-coded visualizations. Fugl.jl supports both vertical (VerticalColorbar) and horizontal (HorizontalColorbar) colorbars.","category":"page"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"The colorbar is a PlotElement, and is therefore drawn using the Plot function. The size and layout is managed like with any other Fugl component.","category":"page"},{"location":"Components/plot/05_colorbar/#Basic-Colorbar-Example","page":"Colorbar","title":"Basic Colorbar Example","text":"","category":"section"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"using Fugl\n\nfunction colorbar_demo()\n    # Create sample data for heatmap\n    x_range = range(-2π, 2π, length=20)\n    y_range = range(-2π, 2π, length=20)\n\n    x_data = Float32.(collect(x_range))\n    y_data = Float32.(collect(y_range))\n\n    # Create 2D function data\n    z_data = Float32.([sin(x) * cos(y) for y in y_range, x in x_range])\n\n    # Create main heatmap\n    heatmap = HeatmapElement(z_data, x_range=(x_data[1], x_data[end]), y_range=(y_data[1], y_data[end]), colormap=:viridis)\n    main_plot = Fugl.Plot([heatmap])\n\n    # Create vertical colorbar for the heatmap\n    vertical_colorbar = VerticalColorbar(heatmap)\n\n    # Create horizontal colorbar for the heatmap\n    horizontal_colorbar = HorizontalColorbar(heatmap)\n\n    # Create UI layout examples\n    ui = Container(\n        Column([\n            # Example 1: Plot with vertical colorbar on the right\n            IntrinsicRow([\n                    main_plot,\n                    FixedWidth(Plot([vertical_colorbar], PlotStyle(\n                            show_left_axis=true,\n                            show_right_axis=true,\n                            show_top_axis=true,\n                            show_bottom_axis=true,\n                            show_x_ticks=false,\n                            show_y_ticks=true\n                        )), 100.0f0)\n                ], spacing=0.0\n            ),\n\n            # Example 2: Plot with horizontal colorbar at bottom\n            IntrinsicColumn([\n                    main_plot,\n                    FixedHeight(Plot([horizontal_colorbar], PlotStyle(\n                            show_left_axis=true,\n                            show_right_axis=true,\n                            show_top_axis=true,\n                            show_bottom_axis=true,\n                            show_x_ticks=true,\n                            show_y_ticks=false\n                        )), 100.0f0)\n                ], spacing=0.0\n            ),\n\n            # Example 3: Different colormap with custom styling\n            IntrinsicRow([\n                    Plot([HeatmapElement(z_data, x_range=(x_data[1], x_data[end]), y_range=(y_data[1], y_data[end]), colormap=:plasma)]),\n                    FixedWidth(Plot([VerticalColorbar(:plasma, (-1.0f0, 1.0f0))], PlotStyle(\n                            show_left_axis=true,\n                            show_right_axis=true,\n                            show_top_axis=true,\n                            show_bottom_axis=true,\n                            show_x_ticks=false,\n                            show_y_ticks=true\n                        )), 100.0f0)\n                ], spacing=0.0\n            ),\n        ], spacing=0.0, padding=0.0)\n    )\n\n    return ui\nend\n\nscreenshot(colorbar_demo, \"colorbar_multiple.png\", 812, 812);\n\nnothing #hide","category":"page"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"(Image: Multiple Colorbars)","category":"page"},{"location":"Components/plot/05_colorbar/#Different-Colormap-Types","page":"Colorbar","title":"Different Colormap Types","text":"","category":"section"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"This example shows all four available colormaps with the same data range:","category":"page"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"using Fugl\nusing Fugl: Text\n\nfunction colormap_types_demo()\n    # Create colorbars with different colormaps\n    grayscale_bar = HorizontalColorbar(:grayscale, (0.0f0, 1.0f0))\n    viridis_bar = HorizontalColorbar(:viridis, (0.0f0, 1.0f0))\n    plasma_bar = HorizontalColorbar(:plasma, (0.0f0, 1.0f0))\n    hot_bar = HorizontalColorbar(:hot, (0.0f0, 1.0f0))\n\n    # Colorbar sizing, style and layout\n    MyColorBar(plot_element) = FixedHeight(Plot([plot_element], PlotStyle(\n            background_color=Vec4(0.0f0, 0.0f0, 0.0f0, 0.0f0),\n            show_left_axis=true,\n            show_right_axis=true,\n            show_top_axis=true,\n            show_bottom_axis=true,\n            show_x_ticks=true,\n            show_y_ticks=false,\n            padding=30.0f0\n        )), 100.0f0)\n\n    ui =\n        IntrinsicRow([\n            Card(\n                \"Grayscale\",\n                MyColorBar(grayscale_bar)\n            ),\n            Card(\n                \"Viridis\",\n                MyColorBar(viridis_bar)\n            ),\n            Card(\n                \"Plasma\",\n                MyColorBar(plasma_bar)\n            ),\n            Card(\n                \"Hot\",\n                MyColorBar(hot_bar)\n            )\n        ], spacing=0.0, padding=0.0)\n    return ui\nend\n\nscreenshot(colormap_types_demo, \"colorbar_types.png\", 812, 160);\n\nnothing #hide","category":"page"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"(Image: Colormap Types)","category":"page"},{"location":"Components/plot/05_colorbar/#Different-Gradient-Resolutions","page":"Colorbar","title":"Different Gradient Resolutions","text":"","category":"section"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"This example shows the effect of different gradient_pixels values on the smoothness of the colorbar gradient:","category":"page"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"using Fugl\nusing Fugl: Text\n\nfunction gradient_resolution_demo()\n    # Create colorbars with different gradient resolutions\n    low_res_bar = HorizontalColorbar(:viridis, (0.0f0, 1.0f0), gradient_pixels=10)\n    medium_res_bar = HorizontalColorbar(:viridis, (0.0f0, 1.0f0), gradient_pixels=60)\n    high_res_bar = HorizontalColorbar(:viridis, (0.0f0, 1.0f0), gradient_pixels=240)\n\n    # Colorbar sizing, style and layout\n    MyColorBar(plot_element) = FixedHeight(Plot([plot_element], PlotStyle(\n            background_color=Vec4(0.0f0, 0.0f0, 0.0f0, 0.0f0),\n            show_left_axis=true,\n            show_right_axis=true,\n            show_top_axis=true,\n            show_bottom_axis=true,\n            show_x_ticks=true,\n            show_y_ticks=false,\n            padding=30.0f0\n        )), 100.0f0)\n\n    ui = Container(\n        IntrinsicColumn([\n            IntrinsicHeight(Text(\"Different Gradient Resolutions\")),\n            IntrinsicRow([\n                Card(\n                    \"10 pixels\",\n                    MyColorBar(low_res_bar)\n                ),\n                Card(\n                    \"60 pixels\",\n                    MyColorBar(medium_res_bar)\n                ),\n                Card(\n                    \"240 pixels\",\n                    MyColorBar(high_res_bar)\n                ),\n            ], spacing=0.0, padding=0.0)\n        ], spacing=10.0, padding=0.0)\n    )\n    return ui\nend\n\nscreenshot(gradient_resolution_demo, \"colorbar_resolution.png\", 812, 200);\n\nnothing #hide","category":"page"},{"location":"Components/plot/05_colorbar/","page":"Colorbar","title":"Colorbar","text":"(Image: Gradient Resolution)","category":"page"},{"location":"Components/code_editor/#CodeEditor","page":"CodeEditor","title":"CodeEditor","text":"","category":"section"},{"location":"Components/code_editor/","page":"CodeEditor","title":"CodeEditor","text":"using Fugl\nusing Fugl: Text\n\n# Create editor states for both components\ncode_editor_state = Ref(EditorState(\"\"\"function hello_world()\n    println(\"Hello, World!\")\n    return 42\nend\"\"\"))\n\n# Dark theme card style\ndark_card_style = ContainerStyle(\n    background_color=Vec4f(0.15, 0.15, 0.18, 1.0),  # Dark background\n    border_color=Vec4f(0.25, 0.25, 0.30, 1.0),      # Subtle border\n    border_width=1.5f0,\n    padding=12.0f0,\n    corner_radius=6.0f0,\n    anti_aliasing_width=1.0f0\n)\n\n# Dark theme title style\ndark_title_style = TextStyle(\n    size_px=18,\n    color=Vec4f(0.9, 0.9, 0.95, 1.0)  # Light text for titles\n)\n\nfunction MyApp()\n    Card(\n        \"Code Editor with Syntax Highlighting:\",\n        CodeEditor(\n            code_editor_state[];\n            on_state_change=(new_state) -> code_editor_state[] = new_state,\n            on_change=(new_text) -> println(\"Optional hook. Code is now: \", new_text[1:min(20, length(new_text))], \"...\")\n        ),\n        style=dark_card_style,\n        title_style=dark_title_style\n    )\nend\n\nscreenshot(MyApp, \"CodeEditor.png\", 812, 400);\nnothing #hide","category":"page"},{"location":"Components/code_editor/","page":"CodeEditor","title":"CodeEditor","text":"(Image: Code Editor)","category":"page"},{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/#Fugl.AbstractTextEditorView","page":"API Reference","title":"Fugl.AbstractTextEditorView","text":"Abstract base type for text editor components. Both CodeEditor and TextBox inherit from this type.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.ButtonState","page":"API Reference","title":"Fugl.ButtonState","text":"Enum representing the state of a mouse button.\n\nIsReleased: The button is currently released.\nIsPressed: The button is currently pressed.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.CursorPosition","page":"API Reference","title":"Fugl.CursorPosition","text":"Represents the position of a cursor in the editor.\n\nline: Line number (1-based)\ncolumn: Column number (1-based, character position within the line)\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.EditorState","page":"API Reference","title":"Fugl.EditorState","text":"State for the code editor containing text, cursor position, and cached tokenization.\n\ntext: The full text content\ncursor: Current cursor position\nis_focused: Whether the editor is focused\nselection_start: Start position of text selection (if any)\nselection_end: End position of text selection (if any)\ncached_lines: Cache of tokenized line data\ntext_hash: Hash of the text to detect changes\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.EditorState-Tuple{EditorState}","page":"API Reference","title":"Fugl.EditorState","text":"Create a new EditorState from an existing state with keyword-based modifications.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.EditorState-Tuple{String, Fugl.CursorPosition, Bool, Dict{Int64, Fugl.LineTokenData}, UInt64}","page":"API Reference","title":"Fugl.EditorState","text":"Create a new EditorState with old 5-parameter signature (for backward compatibility).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.EditorState-Tuple{String}","page":"API Reference","title":"Fugl.EditorState","text":"Create a new EditorState with the given text and cursor at the beginning.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.GLContextState","page":"API Reference","title":"Fugl.GLContextState","text":"OpenGL Context State Management\n\nThis module provides a simple state management system for OpenGL contexts, allowing for framebuffer management, caching, and tracking of current OpenGL state.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.GlyphAtlas","page":"API Reference","title":"Fugl.GlyphAtlas","text":"A texture atlas that stores multiple glyphs in a single OpenGL texture. This dramatically speeds up text rendering by avoiding texture creation per glyph.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.GlyphBatch","page":"API Reference","title":"Fugl.GlyphBatch","text":"A structure to hold batched glyph data for efficient rendering. Each glyph becomes two triangles (6 vertices) in the batch. Inspired by Makie.jl's TextureAtlas approach.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.GlyphKey","page":"API Reference","title":"Fugl.GlyphKey","text":"Unique identifier for a glyph at a specific size and font.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.GlyphUV","page":"API Reference","title":"Fugl.GlyphUV","text":"UV coordinates and dimensions for a glyph in the atlas.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.HorizontalColorbar","page":"API Reference","title":"Fugl.HorizontalColorbar","text":"HorizontalColorbar represents a horizontal colorbar plot element. Size is controlled by FixedHeight layout component.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.HorizontalLineView","page":"API Reference","title":"Fugl.HorizontalLineView","text":"Horizontal line separator that fills available width\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.HorizontalScrollAreaView","page":"API Reference","title":"Fugl.HorizontalScrollAreaView","text":"HorizontalScrollArea view that wraps content and provides horizontal scrolling\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.HorizontalScrollState","page":"API Reference","title":"Fugl.HorizontalScrollState","text":"State for tracking horizontal scroll area scrolling information\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.HorizontalScrollState-Tuple{HorizontalScrollState}","page":"API Reference","title":"Fugl.HorizontalScrollState","text":"Create a new HorizontalScrollState from an existing state with keyword-based modifications\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.HorizontalScrollState-Tuple{}","page":"API Reference","title":"Fugl.HorizontalScrollState","text":"Create a new HorizontalScrollState\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.HorizontalSliderView","page":"API Reference","title":"Fugl.HorizontalSliderView","text":"current_value: Current value of the slider\nmin_value: Minimum value of the slider\nmax_value: Maximum value of the slider\nstyle: Style for the slider\non_change: Callback for value changes\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.HorizontalSplitContainerView","page":"API Reference","title":"Fugl.HorizontalSplitContainerView","text":"A container that allows horizontal resizing by dragging a vertical splitter handle between left and right child components. Optimized version with no runtime direction checks for better performance.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.KeyEvent","page":"API Reference","title":"Fugl.KeyEvent","text":"Struct representing a keyboard event.\n\nkey: GLFW key code (e.g., GLFW.KEYA, GLFW.KEYENTER)\nscancode: Hardware-specific scancode\naction: GLFW action (GLFW.PRESS, GLFW.RELEASE, GLFW.REPEAT)\nmods: Modifier key flags (GLFW.MODSHIFT, GLFW.MODCONTROL, etc.)\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.LineBatch","page":"API Reference","title":"Fugl.LineBatch","text":"Struct for storing a batch of lines for efficient drawing.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.LineTokenData","page":"API Reference","title":"Fugl.LineTokenData","text":"Cached tokenization data for a line of code.\n\nline_number: The line number this data belongs to\nline_text: The original line text\ntokens: Vector of tokens for this line\ntoken_data: Processed token data with positions and colors\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.MarkerBatch","page":"API Reference","title":"Fugl.MarkerBatch","text":"Struct for batch drawing markers.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.ModifierKeys","page":"API Reference","title":"Fugl.ModifierKeys","text":"Struct representing the current state of modifier keys. This provides a clean, explicit API that doesn't require knowledge of GLFW constants.\n\nshift: Whether Shift key is pressed\ncontrol: Whether Control key is pressed  \nalt: Whether Alt key is pressed\nsuper: Whether Super/Cmd/Windows key is pressed\ncaps_lock: Whether Caps Lock is active\nnum_lock: Whether Num Lock is active\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.ModifierKeys-Tuple{Int32}","page":"API Reference","title":"Fugl.ModifierKeys","text":"Create ModifierKeys from GLFW modifier bit flags\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.ModifierKeys-Tuple{}","page":"API Reference","title":"Fugl.ModifierKeys","text":"Default constructor for ModifierKeys with all keys released\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.MouseButton","page":"API Reference","title":"Fugl.MouseButton","text":"Enum representing the different mouse buttons.\n\nLeftButton: The left mouse button.\nRightButton: The right mouse button.\nMiddleButton: The middle mouse button (scroll button).\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.PartialBounds","page":"API Reference","title":"Fugl.PartialBounds","text":"Partial bounds specification for initial view\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.PeriodicCallback","page":"API Reference","title":"Fugl.PeriodicCallback","text":"Represents a periodic callback that executes every N frames\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.PlotState","page":"API Reference","title":"Fugl.PlotState","text":"PlotState(initial_bounds, current_bounds, auto_scale, cache_id)\n\nRepresents the state of a plot, including axis bounds, scaling, and cache information.\n\nFields:\n\ninitial_bounds: User-defined initial view bounds (preserved during drag operations). Can be Rectangle, PartialBounds, or Nothing.\ncurrent_bounds: Current view bounds (after zoom/pan). If nothing, falls back to initial_bounds or auto-scale.\nauto_scale: Bool, whether to automatically scale axes to fit data when no bounds are specified.\ncache_id: Unique identifier for plot cache. Not user managed.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.PlotState-Tuple{PlotState}","page":"API Reference","title":"Fugl.PlotState","text":"Create a new PlotState from an existing state with keyword-based modifications.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.PlotState-Tuple{Rectangle}","page":"API Reference","title":"Fugl.PlotState","text":"Create PlotState with explicit bounds\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.PlotState-Tuple{}","page":"API Reference","title":"Fugl.PlotState","text":"Create PlotState with sensible defaults or initial view bounds\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.Rectangle","page":"API Reference","title":"Fugl.Rectangle","text":"Simple 2D rectangle type.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.Rectangle-NTuple{4, Real}","page":"API Reference","title":"Fugl.Rectangle","text":"Constructor convenience function for different numeric types\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.RotateView","page":"API Reference","title":"Fugl.RotateView","text":"A component that applies rotation transformation to any child component. Uses framebuffer rendering and GPU-based rotation for high quality results.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.ScrollAreaStyle","page":"API Reference","title":"Fugl.ScrollAreaStyle","text":"Style for scroll area appearance\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.SimpleLine","page":"API Reference","title":"Fugl.SimpleLine","text":"Simple struct for storing lines to be drawn.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.SizedView","page":"API Reference","title":"Fugl.SizedView","text":"Abstract type for views that have constrained/intrinsic sizing behavior. These views know their preferred dimensions and can be used with alignment components. Examples: IntrinsicSize, FixedSize, IntrinsicWidth, IntrinsicHeight, etc.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.TableState","page":"API Reference","title":"Fugl.TableState","text":"TableState(column_widths, auto_size, cache_id)\n\nRepresents the state of a table, including column widths and sizing behavior.\n\nFields:\n\ncolumn_widths: Vector of column widths in pixels. If nothing, will be auto-calculated.\nauto_size: Bool, whether to automatically size columns to fit content.\ncache_id: Unique identifier for table cache. Not user managed.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.TableState-Tuple{TableState}","page":"API Reference","title":"Fugl.TableState","text":"Create a new TableState from an existing state with keyword-based modifications.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.TableState-Tuple{Vector{Float32}}","page":"API Reference","title":"Fugl.TableState","text":"Create TableState with explicit column widths\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.TableState-Tuple{}","page":"API Reference","title":"Fugl.TableState","text":"Create TableState with sensible defaults\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.TextEditorStyle-Tuple{}","page":"API Reference","title":"Fugl.TextEditorStyle","text":"Generic constructor for TextEditorStyle with all parameters.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.TreeState-Tuple{TreeState}","page":"API Reference","title":"Fugl.TreeState","text":"Create a new TreeState from an existing state with keyword-based modifications.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.TreeState-Tuple{Union{Nothing, TreeNode}}","page":"API Reference","title":"Fugl.TreeState","text":"Create a new TreeState with the given tree.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.VerticalColorbar","page":"API Reference","title":"Fugl.VerticalColorbar","text":"VerticalColorbar represents a vertical colorbar plot element. Size is controlled by FixedWidth layout component.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.VerticalLineView","page":"API Reference","title":"Fugl.VerticalLineView","text":"Vertical line separator that fills available height\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.VerticalScrollAreaView","page":"API Reference","title":"Fugl.VerticalScrollAreaView","text":"VerticalScrollArea view that wraps content and provides vertical scrolling\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.VerticalScrollState","page":"API Reference","title":"Fugl.VerticalScrollState","text":"State for tracking vertical scroll area scrolling information\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.VerticalScrollState-Tuple{VerticalScrollState}","page":"API Reference","title":"Fugl.VerticalScrollState","text":"Create a new VerticalScrollState from an existing state with keyword-based modifications\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.VerticalScrollState-Tuple{}","page":"API Reference","title":"Fugl.VerticalScrollState","text":"Create a new VerticalScrollState\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.VerticalSplitContainerView","page":"API Reference","title":"Fugl.VerticalSplitContainerView","text":"A container that allows vertical resizing by dragging a horizontal splitter handle between top and bottom child components. Optimized version with no runtime direction checks for better performance.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Fugl.AlignHorizontal","page":"API Reference","title":"Fugl.AlignHorizontal","text":"AlignHorizontal(child::SizedView, alignment::Symbol)\n\nAligns a sized child component horizontally within its container.\n\nArguments\n\nchild: A SizedView component that has intrinsic dimensions\nalignment: Horizontal alignment (:left, :center, :right)\n\nExample\n\nAlignHorizontal(IntrinsicSize(Image(\"logo.png\")), :left)\nAlignHorizontal(FixedSize(Text(\"Hello\"), 100.0f0, 50.0f0), :right)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.AlignVertical","page":"API Reference","title":"Fugl.AlignVertical","text":"AlignVertical(child::SizedView, alignment::Symbol)\n\nAligns a sized child component vertically within its container.\n\nArguments\n\nchild: A SizedView component that has intrinsic dimensions\nalignment: Vertical alignment (:top, :middle, :bottom)\n\nExample\n\nAlignVertical(IntrinsicSize(Image(\"logo.png\")), :top)\nAlignVertical(FixedSize(Text(\"Hello\"), 100.0f0, 50.0f0), :middle)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.Card","page":"API Reference","title":"Fugl.Card","text":"A simple card component that can be used to display a title and content in a styled container.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.CheckBox-Tuple{Bool}","page":"API Reference","title":"Fugl.CheckBox","text":"Create a CheckBox component\n\nArguments\n\nchecked::Bool: Current checked state (user should pass checkbox_state[])\nlabel::String: Optional text label next to the checkbox\nstyle::CheckBoxStyle: Visual styling for the checkbox (includes label text style)\non_change::Function: Callback when checkbox value changes: (new_value::Bool) -> nothing\non_click::Function: Additional click callback\n\nExample\n\n# User-managed state\ncheckbox_state = Ref(false)\n\n# Create checkbox with custom style\ncheckbox = CheckBox(\n    checkbox_state[],  # Pass current value\n    label=\"Enable feature\",\n    style=CheckBoxStyle(\n        size=18.0f0,\n        label_style=TextStyle(size_px=16, color=Vec4f(0.2, 0.2, 0.2, 1.0))\n    ),\n    on_change=(new_value) -> checkbox_state[] = new_value  # User updates state\n)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.CodeEditorStyle-Tuple{}","page":"API Reference","title":"Fugl.CodeEditorStyle","text":"Create a TextEditorStyle with default values suitable for CodeEditor (dark theme).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.Container","page":"API Reference","title":"Fugl.Container","text":"The Container is the most basic GUI component that can contain another component. It is the most basic building block of the GUI system.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.FixedHeight-Tuple{AbstractView, Real}","page":"API Reference","title":"Fugl.FixedHeight","text":"FixedHeight(child::AbstractView, height::Real)\n\nCreates a view that has a fixed height but uses the child's intrinsic width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.FixedSize-Tuple{AbstractView, Real, Real}","page":"API Reference","title":"Fugl.FixedSize","text":"FixedSize(child::AbstractView, width::Real, height::Real)\n\nCreates a view that has a fixed size, regardless of the child's intrinsic size. The child will be rendered at the specified width and height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.FixedWidth-Tuple{AbstractView, Real}","page":"API Reference","title":"Fugl.FixedWidth","text":"FixedWidth(child::AbstractView, width::Real)\n\nCreates a view that has a fixed width but uses the child's intrinsic height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.HLine-Tuple{}","page":"API Reference","title":"Fugl.HLine","text":"Convenience constructor for horizontal line\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.HorizontalLine-Tuple{}","page":"API Reference","title":"Fugl.HorizontalLine","text":"Horizontal line separator that fills available width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.HorizontalScrollArea-Tuple{AbstractView}","page":"API Reference","title":"Fugl.HorizontalScrollArea","text":"Create a HorizontalScrollArea component\n\nArguments\n\ncontent::AbstractView: The content to be scrolled\nscroll_state::HorizontalScrollState: Current scroll state\nstyle::ScrollAreaStyle: Styling for the scroll area\nshow_scrollbar::Bool: Show visual scrollbar\non_scroll_change::Function: Callback when scroll state changes\non_click::Function: Callback for click events\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.HorizontalSplitContainer-Tuple{AbstractView, AbstractView}","page":"API Reference","title":"Fugl.HorizontalSplitContainer","text":"HorizontalSplitContainer(left, right; kwargs...)\n\nCreate a horizontal split container with left and right child components.\n\nArguments\n\nleft::AbstractView: Left child component\nright::AbstractView: Right child component\nstyle::SplitContainerStyle=SplitContainerStyle(): Style configuration\nstate::SplitContainerState=SplitContainerState(): State including split position and interactions\non_state_change::Function=() -> nothing: Callback for state changes (including split position)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.IconButton-Tuple{String}","page":"API Reference","title":"Fugl.IconButton","text":"A button consisting of the icon only.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.IntrinsicSize","page":"API Reference","title":"Fugl.IntrinsicSize","text":"IntrinsicSize(child::AbstractView=EmptyView())\n\nThe IntrinsicSize component is used to wrap a child view and ensure that it uses its intrinsic size for layout. This is useful for components that should not stretch to fill their parent container, but rather use their natural size.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.NumberField","page":"API Reference","title":"Fugl.NumberField","text":"NumberField(\n    state::EditorState=EditorState();\n    type::Type=Float64,\n    on_state_change::Function=(new_state::EditorState) -> nothing,\n    on_change::Function=(new_text) -> nothing\n)\n\nForm field for entering numbers. New values are parsed on focus loss.\n\nArguments\n\nstate::EditorState: Initial state of the text box.\ntype::Type: The numeric type to parse the input as (default is Float64).\non_state_change::Function: Callback for when the state changes. Must update a state ref or similar.\non_change::Function: Optional callback for when the text changes. Passes the new value in specified type.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.Padding","page":"API Reference","title":"Fugl.Padding","text":"Padding component: adds padding around its child, but does not render any graphics.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.Plot","page":"API Reference","title":"Fugl.Plot","text":"Plot component.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.Rotate-Tuple{AbstractView}","page":"API Reference","title":"Fugl.Rotate","text":"Rotate(child::AbstractView; rotation_degrees::Float32=0.0f0)\n\nCreate a rotated wrapper around any child component. Positive angles rotate counter-clockwise.\n\nUses a framebuffer approach: renders child to texture, then rotates the texture with a custom shader.\n\nArguments\n\nchild: The child component to rotate\nrotation_degrees: Rotation angle in degrees (default: 0.0)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.Table-Tuple{Vector{String}, Vector{Vector{String}}}","page":"API Reference","title":"Fugl.Table","text":"Table(headers, data; kwargs...)\n\nCreate a table component with column headers and row data.\n\nArguments\n\nheaders::Vector{String}: Column header names\ndata::Vector{Vector{String}}: Table data as rows of strings\nstyle::TableStyle=TableStyle(): Table styling options\nstate::TableState=TableState(): Table state for column widths and sizing\non_cell_click::Function=(row, col) -> nothing: Callback for cell clicks\non_state_change::Function=(new_state) -> nothing: Callback for state changes\n\nExample\n\nheaders = [\"Name\", \"Age\", \"City\"]\ndata = [\n    [\"Alice\", \"25\", \"New York\"],\n    [\"Bob\", \"30\", \"London\"],\n    [\"Carol\", \"28\", \"Tokyo\"]\n]\ntable = Table(headers, data)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.Text-Tuple{String}","page":"API Reference","title":"Fugl.Text","text":"Text(text::String; style=TextStyle(), horizontal_align=:center, vertical_align=:middle, wrap_text=true)\n\nCreate a Text component with the specified properties.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.TextBoxStyle-Tuple{}","page":"API Reference","title":"Fugl.TextBoxStyle","text":"Create a TextEditorStyle with default values suitable for TextBox (light theme).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.TextButton-Tuple{String}","page":"API Reference","title":"Fugl.TextButton","text":"A button containing text only.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.VLine-Tuple{}","page":"API Reference","title":"Fugl.VLine","text":"Convenience constructor for vertical line\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.VerticalLine-Tuple{}","page":"API Reference","title":"Fugl.VerticalLine","text":"Vertical line separator that fills available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.VerticalScrollArea-Tuple{AbstractView}","page":"API Reference","title":"Fugl.VerticalScrollArea","text":"Create a VerticalScrollArea component\n\nArguments\n\ncontent::AbstractView: The content to be scrolled\nscroll_state::VerticalScrollState: Current scroll state\nstyle::ScrollAreaStyle: Styling for the scroll area\nshow_scrollbar::Bool: Show visual scrollbar\non_scroll_change::Function: Callback when scroll state changes\non_click::Function: Callback for click events\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.VerticalSplitContainer-Tuple{AbstractView, AbstractView}","page":"API Reference","title":"Fugl.VerticalSplitContainer","text":"VerticalSplitContainer(top, bottom; kwargs...)\n\nCreate a vertical split container with top and bottom child components.\n\nArguments\n\ntop::AbstractView: Top child component\nbottom::AbstractView: Bottom child component\nstyle::SplitContainerStyle=SplitContainerStyle(): Style configuration\nstate::SplitContainerState=SplitContainerState(): State including split position and interactions\non_state_change::Function=() -> nothing: Callback for state changes (including split position)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.add_glyph_to_batch!-Tuple{Fugl.GlyphBatch, Vararg{Float32, 8}}","page":"API Reference","title":"Fugl.add_glyph_to_batch!","text":"Add a single glyph to the batch. This is much more efficient than individual rendering.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.add_line!","page":"API Reference","title":"Fugl.add_line!","text":"Add a complete line (series of connected points) to the batch\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.add_marker!-Tuple{Fugl.MarkerBatch, GeometryBasics.Point{2, Float32}, Float32, GeometryBasics.Vec{4, Float32}, GeometryBasics.Vec{4, Float32}, Float32, MarkerType}","page":"API Reference","title":"Fugl.add_marker!","text":"Add a marker to the batch.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.add_rotated_glyph_to_batch!-Tuple{Fugl.GlyphBatch, Vararg{Float32, 9}}","page":"API Reference","title":"Fugl.add_rotated_glyph_to_batch!","text":"Add a single rotated glyph to the batch. Each glyph quad is rotated around its lower-left corner and positioned along a rotated baseline.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_clipboard_action!-Tuple{EditorState, Fugl.ClipboardAction}","page":"API Reference","title":"Fugl.apply_clipboard_action!","text":"Apply clipboard action with platform-specific clipboard access.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_clipboard_action-Tuple{EditorState, Fugl.ClipboardAction}","page":"API Reference","title":"Fugl.apply_clipboard_action","text":"Apply clipboard action. Returns a new EditorState with clipboard operations applied.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_delete_text!-Tuple{EditorState, Fugl.DeleteText}","page":"API Reference","title":"Fugl.apply_delete_text!","text":"Apply delete text action.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_delete_text-Tuple{EditorState, Fugl.DeleteText}","page":"API Reference","title":"Fugl.apply_delete_text","text":"Apply text deletion action. Returns a new EditorState with the text deleted.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_editor_action-Tuple{EditorState, Fugl.EditorAction}","page":"API Reference","title":"Fugl.apply_editor_action","text":"Apply an editor action to the editor state. Returns a new EditorState with the action applied.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_extend_mouse_selection-Tuple{EditorState, Fugl.ExtendMouseSelection}","page":"API Reference","title":"Fugl.apply_extend_mouse_selection","text":"Apply extend mouse selection action. Returns a new EditorState with selection extended to the given position.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_insert_text-Tuple{EditorState, Fugl.InsertText}","page":"API Reference","title":"Fugl.apply_insert_text","text":"Apply text insertion action. Returns a new EditorState with the text inserted.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_layout-Tuple{AbstractView}","page":"API Reference","title":"Fugl.apply_layout","text":"apply_layout(component::AbstractView)\n\nApply layout to a GUI component and its children. This function calculates and applies the layout to components. The interpret_view function then uses the positions and sizes calculated by this function.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_layout-Tuple{Fugl.ContainerView, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.apply_layout","text":"Calculate layout to the container and its child.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_layout-Tuple{Fugl.HorizontalScrollAreaView, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.apply_layout","text":"Apply layout to horizontal scroll area - measures content and sets up viewport\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_layout-Tuple{Fugl.VerticalScrollAreaView, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.apply_layout","text":"Apply layout to vertical scroll area - measures content and sets up viewport\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_move_cursor!-Tuple{EditorState, Fugl.MoveCursor}","page":"API Reference","title":"Fugl.apply_move_cursor!","text":"Apply cursor movement action.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_move_cursor-Tuple{EditorState, Fugl.MoveCursor}","page":"API Reference","title":"Fugl.apply_move_cursor","text":"Apply cursor movement action. Returns a new EditorState with the cursor moved and selection updated if needed.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_select_all-Tuple{EditorState, Fugl.SelectAll}","page":"API Reference","title":"Fugl.apply_select_all","text":"Apply select all action. Returns a new EditorState with all text selected.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_select_word-Tuple{EditorState, Fugl.SelectWord}","page":"API Reference","title":"Fugl.apply_select_word","text":"Apply select word action. Returns a new EditorState with the word at the cursor position selected.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.apply_start_mouse_selection-Tuple{EditorState, Fugl.StartMouseSelection}","page":"API Reference","title":"Fugl.apply_start_mouse_selection","text":"Apply start mouse selection action. Returns a new EditorState with selection started at the given position.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.calculate_and_update_column_widths!-Tuple{Fugl.TableView, Float32}","page":"API Reference","title":"Fugl.calculate_and_update_column_widths!","text":"calculate_and_update_column_widths!(view::TableView, available_width::Float32)\n\nCalculate new column widths and update the table state via callback. This function can be called by the user when they want to recalculate column sizing.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.calculate_bounds_from_elements-Tuple{Vector{AbstractPlotElement}}","page":"API Reference","title":"Fugl.calculate_bounds_from_elements","text":"Calculate bounds from a vector of plot elements\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.calculate_column_widths-Tuple{Fugl.TableView, Float32}","page":"API Reference","title":"Fugl.calculate_column_widths","text":"calculate_column_widths(view::TableView, available_width::Float32)::Vector{Float32}\n\nCalculate optimal column widths based on content and available space. Uses a simple algorithm that:\n\nCalculates minimum width needed for each column based on content\nIf total minimum width < available width, distributes extra space proportionally\nIf total minimum width > available width, scales all columns down proportionally\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.calculate_line_progress-Tuple{Vector{GeometryBasics.Point{2, Float32}}}","page":"API Reference","title":"Fugl.calculate_line_progress","text":"calculate_line_progress(points::Vector{Point2f})\n\nCalculate cumulative distance along the line for pattern calculations.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.calculate_rotated_bounding_box-Tuple{Float32, Float32, Float32}","page":"API Reference","title":"Fugl.calculate_rotated_bounding_box","text":"Calculate the bounding box of a rotated rectangle. Returns (width, height) of the axis-aligned bounding box.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.char_callback-Tuple{Any, Any, InputState}","page":"API Reference","title":"Fugl.char_callback","text":"New character callback for proper text input This function handles character input from the keyboard, converting Unicode codepoints to characters.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.char_length-Tuple{AbstractString}","page":"API Reference","title":"Fugl.char_length","text":"Get the character length of a string (not byte length).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clamp_cursor-Tuple{EditorState, Fugl.CursorPosition}","page":"API Reference","title":"Fugl.clamp_cursor","text":"Clamp cursor position to valid bounds within the text.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.cleanup_render_cache-Tuple{Fugl.RenderCache}","page":"API Reference","title":"Fugl.cleanup_render_cache","text":"Clean up OpenGL resources for a single cache entry\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.cleanup_render_cache_id!-Tuple{UInt64}","page":"API Reference","title":"Fugl.cleanup_render_cache_id!","text":"Clean up render cache for a specific cache ID\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.cleanup_stale_render_caches!","page":"API Reference","title":"Fugl.cleanup_stale_render_caches!","text":"Clean up old caches that haven't been accessed recently. Call this periodically to prevent memory leaks from unused caches.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.clear_batch!-Tuple{Fugl.GlyphBatch}","page":"API Reference","title":"Fugl.clear_batch!","text":"Clear all data from a glyph batch to reuse it.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clear_glyph_atlas!-Tuple{}","page":"API Reference","title":"Fugl.clear_glyph_atlas!","text":"clear_glyph_atlas!()\n\nClear the global glyph atlas cache and any associated batches.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clear_render_caches!-Tuple{}","page":"API Reference","title":"Fugl.clear_render_caches!","text":"Clear all render caches and free associated OpenGL resources. Call this when the OpenGL context is being destroyed or recreated.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clear_selection-Tuple{EditorState}","page":"API Reference","title":"Fugl.clear_selection","text":"Clear the text selection.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clear_text_batch!-Tuple{}","page":"API Reference","title":"Fugl.clear_text_batch!","text":"Clear the global text batch to free memory.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.clip_text_with_ellipsis-Tuple{String, Any, Int64, Float32}","page":"API Reference","title":"Fugl.clip_text_with_ellipsis","text":"clip_text_with_ellipsis(text, font, size_px, available_width)\n\nClip text at character level to fit within available width, adding \"...\" if clipped.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.compare_cursor_positions-Tuple{Fugl.CursorPosition, Fugl.CursorPosition}","page":"API Reference","title":"Fugl.compare_cursor_positions","text":"Compare two cursor positions. Returns:\n\n-1 if pos1 < pos2\n0 if pos1 == pos2  \n1 if pos1 > pos2\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.copy_to_clipboard-Tuple{String}","page":"API Reference","title":"Fugl.copy_to_clipboard","text":"Copy text to system clipboard using Julia's standard library.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.create_glyph_atlas","page":"API Reference","title":"Fugl.create_glyph_atlas","text":"create_glyph_atlas(width=4096, height=4096) -> GlyphAtlas\n\nCreate a new glyph atlas texture with larger size for better performance. Inspired by Makie.jl's approach with larger atlases to reduce cache misses.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.create_render_framebuffer-Tuple{Int32, Int32}","page":"API Reference","title":"Fugl.create_render_framebuffer","text":"Create a framebuffer with color and optional depth texture Returns (framebufferid, colortextureid, depthtexture_id)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.cull_line_data-Tuple{Vector{Float32}, Vector{Float32}, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.cull_line_data","text":"Cull line data and clip line segments to viewport bounds using proper interpolation. This function clips line segments at the exact viewport boundaries to prevent  lines from extending outside the visible area. Returns culled x and y data arrays with clipped segments.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.cull_point_data-Tuple{Vector{Float32}, Vector{Float32}, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.cull_point_data","text":"Cull point data to only include points within the specified bounds. Returns culled x and y data arrays.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.delete_range!-Tuple{EditorState, Fugl.CursorPosition, Fugl.CursorPosition}","page":"API Reference","title":"Fugl.delete_range!","text":"Delete text between two cursor positions.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.delete_selected_text-Tuple{EditorState}","page":"API Reference","title":"Fugl.delete_selected_text","text":"Delete the currently selected text and return new state. Returns the state unchanged if no selection.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.detect_click-Tuple{Fugl.CodeEditorView, InputState, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.detect_click","text":"Detect click events and handle focus, cursor positioning, drag selection, and double-clicks.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.detect_click-Tuple{Fugl.ContainerView, InputState, Vararg{AbstractFloat, 4}}","page":"API Reference","title":"Fugl.detect_click","text":"Detect clicks on the container and its child.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.detect_click-Tuple{Fugl.HorizontalScrollAreaView, InputState, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.detect_click","text":"Detect clicks within the horizontal scroll area\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.detect_click-Tuple{Fugl.TextBoxView, InputState, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.detect_click","text":"Detect click events and handle focus, cursor positioning, drag selection, and double-clicks for TextBox.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.detect_click-Tuple{Fugl.VerticalScrollAreaView, InputState, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.detect_click","text":"Detect clicks within the vertical scroll area\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_axes_with_labels-Tuple{Rectangle, Vector{Float32}, Vector{Float32}, Function, Rectangle, GeometryBasics.Vec{4, Float32}, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_axes_with_labels","text":"Draw axes with labels and tick marks using both lines and Text components Axis lines, tick marks, and labels are positioned at plot edges (left/bottom), not at zero lines\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_cached_texture-Tuple{UInt32, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_cached_texture","text":"Draw a cached texture to screen using a simple textured quad with pixel alignment\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_checkmark-Tuple{Float32, Float32, Float32, GeometryBasics.Vec{4, Float32}, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_checkmark","text":"Draw a checkmark symbol inside the checkbox using the new line drawing system\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_closed_lines-Tuple{Vector{GeometryBasics.Point{2, Float32}}, Vec4{<:AbstractFloat}}","page":"API Reference","title":"Fugl.draw_closed_lines","text":"draw_closed_lines(vertices::Vector{Point2f}, color_rgba::Vec4{<:AbstractFloat})\n\nDraw closed lines using the provided vertices and color.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_colorbar_gradient-Tuple{Union{HorizontalColorbar, VerticalColorbar}, Symbol, Float32, Float32, Float32, Float32, Function, StaticArraysCore.SMatrix{4, 4, Float32, 16}, Rectangle}","page":"API Reference","title":"Fugl.draw_colorbar_gradient","text":"Draw a colorbar gradient using the existing heatmap drawing system with proper coordinate transform.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_cursor","page":"API Reference","title":"Fugl.draw_cursor","text":"Draw the cursor at the specified position.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.draw_glyph_atlas_debug-Tuple{Fugl.GlyphAtlas, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_glyph_atlas_debug","text":"draw_glyph_atlas_debug(atlas, x, y, scale, projection_matrix)\n\nDraw the entire glyph atlas texture to the screen for debugging purposes. This helps visualize what glyphs are actually stored in the atlas.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_glyph_from_atlas-Tuple{GLAbstraction.Texture, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}, GeometryBasics.Vec{4, Float32}}","page":"API Reference","title":"Fugl.draw_glyph_from_atlas","text":"draw_glyph_from_atlas(texture, x, y, width, height, u_min, v_min, u_max, v_max, projection_matrix, color)\n\nDraw a single glyph from the atlas texture with specified UV coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_grid-Tuple{Rectangle, Vector{Float32}, Vector{Float32}, Function, GeometryBasics.Vec{4, Float32}, Float32, LineStyle, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_grid","text":"Draw a grid with specified parameters using the enhanced line shader\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_line-Tuple{Vector{GeometryBasics.Point{2, Float32}}, GeometryBasics.Vec{4, Float32}, Float32, LineStyle, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_line","text":"draw_line(points::Vector{Point2f}, color::Vec4{Float32}, width::Float32, line_style::LineStyle, projection_matrix::Mat4{Float32}; anti_aliasing_width::Float32=1.5f0)\n\nDraw a single line with the specified properties.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_lines-Tuple{Fugl.LineBatch, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_lines","text":"Batched line drawing function.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_lines-Tuple{Vector{SimpleLine}, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_lines","text":"draw_lines(lines::Vector{SimpleLine}, projection_matrix::Mat4{Float32}; anti_aliasing_width::Float32=1.5f0)\n\nDraw multiple lines efficiently in a single batch.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_markers-Tuple{Fugl.MarkerBatch, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_markers","text":"Draw markers from a batch using the marker shader.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_matrix_with_colormap-Tuple{Matrix{Float32}, Symbol, Tuple{Float32, Float32}, NTuple{4, Float32}, NTuple{4, Float32}, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_matrix_with_colormap","text":"Generalized texture-based rendering function for colormapped data. Can be used by heatmaps, colorbars, and other texture-based visualizations.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_multiline_text_batched","page":"API Reference","title":"Fugl.draw_multiline_text_batched","text":"Multi-line batched text rendering that collects all lines into a single batch. This provides maximum performance for rendering multiple lines of text.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.draw_rectangle-Tuple{Vector{GeometryBasics.Point{2, Float32}}, Vec4{<:AbstractFloat}, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_rectangle","text":"draw_rectangle(vertices::Vector{Point2f}, color_rgba::Vec4{<:AbstractFloat}, projection_matrix::Mat4{Float32})\n\nDraw a rectangle using the provided vertices and color.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_rotated_texture-Tuple{UInt32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_rotated_texture","text":"Draw a texture with rotation applied via shader\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_rounded_rectangle-Tuple{Vector{GeometryBasics.Point{2, Float32}}, Float32, Float32, Vec4{<:AbstractFloat}, Vec4{<:AbstractFloat}, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}, Float32}","page":"API Reference","title":"Fugl.draw_rounded_rectangle","text":"draw_rounded_rectangle(\n    vertices::Vector{Point2f},\n    width::Float32, height::Float32,\n    fill_color_rgba::Vec4{<:AbstractFloat}, border_color_rgba::Vec4{<:AbstractFloat},\n    border_width::Float32, radius::Float32,\n    projection_matrix::Mat4{Float32},\n    anti_aliasing_width::Float32\n)\n\nDraw a rounded rectangle with border using the custom shader.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_scatter_plot-Tuple{Vector{Float32}, Vector{Float32}, Function, GeometryBasics.Vec{4, Float32}, GeometryBasics.Vec{4, Float32}, Float32, Float32, MarkerType, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_scatter_plot","text":"Draw cached text texture to screen\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_selection_background","page":"API Reference","title":"Fugl.draw_selection_background","text":"Draw selection background for a line of text.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.draw_simple_line-Tuple{GeometryBasics.Point{2, Float32}, GeometryBasics.Point{2, Float32}, GeometryBasics.Vec{4, Float32}, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.draw_simple_line","text":"draw_simple_line(start_point::Point2f, end_point::Point2f, color::Vec4{Float32}, width::Float32, projection_matrix::Mat4{Float32}; line_style::LineStyle=SOLID, anti_aliasing_width::Float32=1.5f0)\n\nConvenience function to draw a simple line between two points.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.draw_text_batched","page":"API Reference","title":"Fugl.draw_text_batched","text":"Optimized batched text rendering function that collects all glyphs first, then renders them in a single draw call. Much faster for large amounts of text.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.find_word_boundary-Tuple{EditorState, Fugl.CursorPosition, Symbol}","page":"API Reference","title":"Fugl.find_word_boundary","text":"Find word boundary for word-based movement.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.generate_cache_id-Tuple{}","page":"API Reference","title":"Fugl.generate_cache_id","text":"Generate a unique cache ID for a component\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.generate_line_geometry-Tuple{Vector{GeometryBasics.Point{2, Float32}}, GeometryBasics.Vec{4, Float32}, Float32, LineStyle}","page":"API Reference","title":"Fugl.generate_line_geometry","text":"generate_line_geometry(points::Vector{Point2f}, color::Vec4{Float32}, width::Float32, line_style::LineStyle)\n\nGenerate geometry for a single line using triangles. Returns arrays for positions, directions, widths, colors, vertextypes, linestyles, and line_progresses.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.generate_rectangle_vertices-NTuple{4, Any}","page":"API Reference","title":"Fugl.generate_rectangle_vertices","text":"generate_rectangle_vertices(x, y, width, height)\n\nFunction to generate a rectangle with specified position and size in pixel coordinates.\n\nThis function creates a rectangle defined by its top-left corner (x, y), width, and height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.generate_tick_positions","page":"API Reference","title":"Fugl.generate_tick_positions","text":"Generate reasonable tick positions for a given range\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Fugl.get_current_framebuffer-Tuple{}","page":"API Reference","title":"Fugl.get_current_framebuffer","text":"Get the current framebuffer binding\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_current_viewport-Tuple{}","page":"API Reference","title":"Fugl.get_current_viewport","text":"Get the current viewport state\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_effective_bounds-Tuple{PlotState, Vector{AbstractPlotElement}}","page":"API Reference","title":"Fugl.get_effective_bounds","text":"Get effective bounds for plotting (considering zoom state) Priority: currentbounds -> initialbounds (with partial bounds support) -> auto-calculated from elements\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_effective_column_widths-Tuple{Fugl.TableView, Float32}","page":"API Reference","title":"Fugl.get_effective_column_widths","text":"get_effective_column_widths(view::TableView, available_width::Float32)::Vector{Float32}\n\nGet effective column widths for rendering. Priority: state.column_widths -> auto-calculated widths\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_element_bounds-Tuple{AbstractPlotElement}","page":"API Reference","title":"Fugl.get_element_bounds","text":"Helper function to extract data bounds from any plot element\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_font_hash-Tuple{FreeTypeAbstraction.FTFont}","page":"API Reference","title":"Fugl.get_font_hash","text":"get_font_hash(font::FreeTypeAbstraction.FTFont) -> UInt64\n\nGet a unique hash for a font face.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_from_clipboard-Tuple{}","page":"API Reference","title":"Fugl.get_from_clipboard","text":"Get text from system clipboard using Julia's standard library.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_glyph_atlas-Tuple{}","page":"API Reference","title":"Fugl.get_glyph_atlas","text":"get_glyph_atlas() -> GlyphAtlas\n\nGet the global glyph atlas, creating it if it doesn't exist.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_line_count-Tuple{EditorState}","page":"API Reference","title":"Fugl.get_line_count","text":"Get the number of lines in the editor.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_line_length-Tuple{EditorState, Int64}","page":"API Reference","title":"Fugl.get_line_length","text":"Get the character length of a specific line (1-indexed). Returns 0 if the line number is out of bounds.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_lines-Tuple{EditorState}","page":"API Reference","title":"Fugl.get_lines","text":"Split text into lines for easier manipulation. Returns a vector of strings, where each string is a line of text.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_lines-Tuple{String}","page":"API Reference","title":"Fugl.get_lines","text":"Split text into lines for easier manipulation. Returns a vector of strings, where each string is a line of text.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_or_insert_glyph!-Tuple{Fugl.GlyphAtlas, FreeTypeAbstraction.FTFont, Char, Int64}","page":"API Reference","title":"Fugl.get_or_insert_glyph!","text":"get_or_insert_glyph!(atlas::GlyphAtlas, font, char, pixelsize) -> GlyphUV\n\nGet glyph UV coordinates from atlas, inserting the glyph if not present.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_orthographic_matrix-Union{Tuple{T}, NTuple{6, T}} where T<:Real","page":"API Reference","title":"Fugl.get_orthographic_matrix","text":"get_orthographic_matrix(left::T, right::T, bottom::T, top::T, near::T, far::T)::Matrix{T} where {T<:Real}\n\nCreate an orthographic projection matrix.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_render_cache-Tuple{UInt64}","page":"API Reference","title":"Fugl.get_render_cache","text":"Get or create a render cache for the given cache ID.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_render_cache_stats-Tuple{}","page":"API Reference","title":"Fugl.get_render_cache_stats","text":"Get cache statistics for debugging/monitoring\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_selected_text-Tuple{EditorState}","page":"API Reference","title":"Fugl.get_selected_text","text":"Get the currently selected text. Returns empty string if no selection.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_selected_text_or_line-Tuple{EditorState}","page":"API Reference","title":"Fugl.get_selected_text_or_line","text":"Get the currently selected text, or the current line if no text is selected.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_selection_range-Tuple{EditorState}","page":"API Reference","title":"Fugl.get_selection_range","text":"Get the selection range in a normalized form (start <= end). Returns (startpos, endpos) or (nothing, nothing) if no selection.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.get_tokenized_line-Tuple{EditorState, Int64}","page":"API Reference","title":"Fugl.get_tokenized_line","text":"Get or create tokenized line data for a specific line.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.handle_horizontal_scroll_wheel-Tuple{Fugl.HorizontalScrollAreaView, Float32}","page":"API Reference","title":"Fugl.handle_horizontal_scroll_wheel","text":"Handle horizontal mouse wheel scrolling\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.handle_key_input-Tuple{Fugl.TextBoxView, InputState}","page":"API Reference","title":"Fugl.handle_key_input","text":"Handle key input for TextBox (same as CodeEditor but without syntax highlighting).\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.handle_vertical_scroll_wheel-Tuple{Fugl.VerticalScrollAreaView, Float32}","page":"API Reference","title":"Fugl.handle_vertical_scroll_wheel","text":"Handle vertical mouse wheel scrolling\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.has_any_modifier-Tuple{ModifierKeys}","page":"API Reference","title":"Fugl.has_any_modifier","text":"Check if any modifier key is pressed\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.has_selection-Tuple{EditorState}","page":"API Reference","title":"Fugl.has_selection","text":"Check if there is an active text selection.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.hash_plot_content-Tuple{Vector{AbstractPlotElement}, PlotState, PlotStyle}","page":"API Reference","title":"Fugl.hash_plot_content","text":"Generate a content hash for all rendering-relevant state\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.hash_text_content-Tuple{String, Any, Bool, Any, Any}","page":"API Reference","title":"Fugl.hash_text_content","text":"Generate a content hash for text components (TextBox/CodeEditor) that captures all rendering-relevant state\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.hash_tree_content-Tuple{Union{Nothing, TreeNode}, TreeState, TreeStyle}","page":"API Reference","title":"Fugl.hash_tree_content","text":"Generate a content hash for all rendering-relevant tree state\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.initialize_gl_state!-Tuple{}","page":"API Reference","title":"Fugl.initialize_gl_state!","text":"Initialize the GL state management system\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.initialize_plot_shaders-Tuple{}","page":"API Reference","title":"Fugl.initialize_plot_shaders","text":"Initialize the plot shader programs (must be called after OpenGL context is created)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.initialize_shaders-Tuple{}","page":"API Reference","title":"Fugl.initialize_shaders","text":"Initialize the shader program (must be called after OpenGL context is created)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.interpret_view-Tuple{AbstractView, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.interpret_view","text":"interpret_view(component::AbstractView, x::Float32, y::Float32, width::Float32, height::Float32, projection_matrix::Mat4{Float32})\n\nInterpret the view of a GUI component. This function is responsible for interpreting the view of a GUI component based on its layout and properties.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.interpret_view-Tuple{Fugl.ContainerView, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.interpret_view","text":"Render the container and its child.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.interpret_view-Tuple{Fugl.HorizontalScrollAreaView, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.interpret_view","text":"Render the horizontal scroll area with content and optional scrollbar\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.interpret_view-Tuple{Fugl.VerticalScrollAreaView, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.interpret_view","text":"Render the vertical scroll area with content and optional scrollbar\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.invalidate_render_cache!-Tuple{Fugl.RenderCache}","page":"API Reference","title":"Fugl.invalidate_render_cache!","text":"Manually invalidate a render cache to force re-render on next frame\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.is_cache_framebuffer-Tuple{UInt32}","page":"API Reference","title":"Fugl.is_cache_framebuffer","text":"Check if a framebuffer is a cache framebuffer\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.is_command_key-Tuple{ModifierKeys}","page":"API Reference","title":"Fugl.is_command_key","text":"Check if Control or Command (Super) key is pressed - common pattern for shortcuts\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.is_framebuffer_valid-Tuple{UInt32}","page":"API Reference","title":"Fugl.is_framebuffer_valid","text":"Check if a framebuffer is still valid and complete\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.is_word_char-Tuple{Char}","page":"API Reference","title":"Fugl.is_word_char","text":"Helper function to determine if a character is part of a word\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.key_callback-Tuple{Any, Any, Any, Any, Any, InputState}","page":"API Reference","title":"Fugl.key_callback","text":"Alternative signature in case GLFW passes Char directly This function adds a character directly to the key buffer.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.key_event_to_action-Tuple{KeyEvent}","page":"API Reference","title":"Fugl.key_event_to_action","text":"Convert a GLFW key event to an EditorAction.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure-Tuple{AbstractView}","page":"API Reference","title":"Fugl.measure","text":"Measure the intrinsic size of a component.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure-Tuple{Fugl.HorizontalScrollAreaView}","page":"API Reference","title":"Fugl.measure","text":"Measure the horizontal scroll area - measures content width, takes all available space in height\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure-Tuple{Fugl.TextView}","page":"API Reference","title":"Fugl.measure","text":"measure(view::TextView)::Tuple{Float32,Float32}\n\nAssumes text is rendered in a single line.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure-Tuple{Fugl.VerticalScrollAreaView}","page":"API Reference","title":"Fugl.measure","text":"Measure the vertical scroll area - takes all available space in width, measures content height\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_height-Tuple{AbstractView, Float32}","page":"API Reference","title":"Fugl.measure_height","text":"Measure the intrinsic height of a component given an available width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_height-Tuple{Fugl.ColumnView, Float32}","page":"API Reference","title":"Fugl.measure_height","text":"Measure the height of the column when constrained by available width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_height-Tuple{Fugl.DropdownView, Float32}","page":"API Reference","title":"Fugl.measure_height","text":"Measure the height of the component when constrained by available width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_height-Tuple{Fugl.IntrinsicColumnView, Float32}","page":"API Reference","title":"Fugl.measure_height","text":"Measure the height of the component when constrained by available width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_height-Tuple{Fugl.IntrinsicRowView, Float32}","page":"API Reference","title":"Fugl.measure_height","text":"Measure the height of the component when constrained by available width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_height-Tuple{Fugl.RowView, Float32}","page":"API Reference","title":"Fugl.measure_height","text":"Measure the height of the component when constrained by available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_width-Tuple{AbstractView, Float32}","page":"API Reference","title":"Fugl.measure_width","text":"Measure the intrinsic width of a component given an available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_width-Tuple{Fugl.ColumnView, Float32}","page":"API Reference","title":"Fugl.measure_width","text":"Measure the width of the column when constrained by available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_width-Tuple{Fugl.DropdownView, Float32}","page":"API Reference","title":"Fugl.measure_width","text":"Measure the width of the component when constrained by available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_width-Tuple{Fugl.IntrinsicColumnView, Float32}","page":"API Reference","title":"Fugl.measure_width","text":"Measure the width of the component when constrained by available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_width-Tuple{Fugl.IntrinsicRowView, Float32}","page":"API Reference","title":"Fugl.measure_width","text":"Measure the width of the component when constrained by available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_width-Tuple{Fugl.RowView, Float32}","page":"API Reference","title":"Fugl.measure_width","text":"Measure the width of the component when constrained by available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_width-Tuple{Fugl.TextView, Float32}","page":"API Reference","title":"Fugl.measure_width","text":"Measure the width of the text when constrained by available height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_word_width-Tuple{FreeTypeAbstraction.FTFont, AbstractString, Int64}","page":"API Reference","title":"Fugl.measure_word_width","text":"measure_word_width(font::FreeTypeAbstraction.FTFont, word::AbstractString, size_px::Int)::Float32\n\nMeasure the width of a word using FreeType for accurate rendering metrics. This is more accurate but slower than estimatewordwidth.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.measure_word_width_cached-Tuple{FreeTypeAbstraction.FTFont, AbstractString, Int64}","page":"API Reference","title":"Fugl.measure_word_width_cached","text":"measure_word_width_cached(font::FreeTypeAbstraction.FTFont, word::AbstractString, size_px::Int)::Float32\n\nMeasure the width of a word using cached glyph advance widths from the glyph atlas. This is faster than measurewordwidth since it avoids re-rendering glyphs that are already cached.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.mouse_position_callback-Tuple{Any, Any, Any, InputState}","page":"API Reference","title":"Fugl.mouse_position_callback","text":"Mouse position callback to track mouse movement and detect dragging\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.mouse_to_cursor_position-Tuple{EditorState, Any, Int64, Float32, Float64, Float64, Vararg{Float32, 4}}","page":"API Reference","title":"Fugl.mouse_to_cursor_position","text":"Convert mouse coordinates to cursor position within a text editor component. This is a generic function that works for both CodeEditor and TextBox.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.needs_retokenization-Tuple{EditorState, Int64}","page":"API Reference","title":"Fugl.needs_retokenization","text":"Check if a line needs to be re-tokenized based on text changes.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.pop_framebuffer!-Tuple{}","page":"API Reference","title":"Fugl.pop_framebuffer!","text":"Pop the previous framebuffer from the stack and restore it\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.pop_viewport!-Tuple{}","page":"API Reference","title":"Fugl.pop_viewport!","text":"Pop the previous viewport from the stack and restore it\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.preferred_height-Tuple{AbstractView}","page":"API Reference","title":"Fugl.preferred_height","text":"Check if the component has a preferred height.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.preferred_size-Tuple{AbstractView}","page":"API Reference","title":"Fugl.preferred_size","text":"Check if the component has a preferred size.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.preferred_width-Tuple{AbstractView}","page":"API Reference","title":"Fugl.preferred_width","text":"Check if the component has a preferred width.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.push_framebuffer!-Tuple{UInt32}","page":"API Reference","title":"Fugl.push_framebuffer!","text":"Push the current framebuffer onto the stack and bind a new one\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.push_viewport!-NTuple{4, Int32}","page":"API Reference","title":"Fugl.push_viewport!","text":"Push the current viewport onto the stack and set a new one\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.register_cache_framebuffer!-Tuple{UInt32}","page":"API Reference","title":"Fugl.register_cache_framebuffer!","text":"Register a framebuffer as a cache framebuffer\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.register_shader_initializer!-Tuple{Function}","page":"API Reference","title":"Fugl.register_shader_initializer!","text":"register_shader_initializer!(init_function::Function)\n\nRegister an external shader initialization function to be called during Fugl's shader initialization. This allows external packages (like FuglDrawing.jl) to register their shaders.\n\nArguments\n\ninit_function::Function: A function that will be called during shader initialization\n\nExample\n\n# In FuglDrawing.jl\nfunction initialize_drawing_shaders()\n    # Initialize drawing-specific shaders\n    drawing_prog[] = Program(drawing_vertex_shader, drawing_fragment_shader)\nend\n\n# Register with Fugl\nFugl.register_shader_initializer!(initialize_drawing_shaders)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_child_to_framebuffer-Tuple{Fugl.RotateView, Fugl.RenderCache, Float32, Float32}","page":"API Reference","title":"Fugl.render_child_to_framebuffer","text":"Render the child component to the framebuffer\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_fps_overlay-Tuple{Int64, Float64, Float32, Float32, Any}","page":"API Reference","title":"Fugl.render_fps_overlay","text":"render_fps_overlay(frame_count, fps, screen_width, screen_height, projection_matrix)\n\nRender debug overlay showing frame count and FPS in the upper right corner.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_glyph_batch!-Tuple{Fugl.GlyphBatch, GLAbstraction.Texture, StaticArraysCore.SMatrix{4, 4, Float32, 16}, GeometryBasics.Vec{4, Float32}}","page":"API Reference","title":"Fugl.render_glyph_batch!","text":"Render all glyphs in the batch with a single draw call. This is dramatically faster than individual glyph rendering.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_horizontal_scrollbar-Tuple{Fugl.HorizontalScrollAreaView, Float32, Float32, Float32, Float32, HorizontalScrollState, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.render_horizontal_scrollbar","text":"Render horizontal scrollbar\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_line_from_cache-Tuple{Fugl.LineTokenData, Any, Float32, Float32, Int64, Any}","page":"API Reference","title":"Fugl.render_line_from_cache","text":"Render a line using cached tokenization data with optimized batched rendering.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_no_overlay-Tuple{Int64, Float64, Float32, Float32, Any}","page":"API Reference","title":"Fugl.render_no_overlay","text":"render_no_overlay(frame_count, fps, screen_width, screen_height, projection_matrix)\n\nNo-op function for when FPS overlay is disabled. This gets optimized away by the compiler.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_tree_content-Tuple{Fugl.TreeView, Float32, Float32, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.render_tree_content","text":"Render the tree content (shared between direct and framebuffer drawing)\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.render_vertical_scrollbar-Tuple{Fugl.VerticalScrollAreaView, Float32, Float32, Float32, Float32, VerticalScrollState, Float32, Float32, StaticArraysCore.SMatrix{4, 4, Float32, 16}}","page":"API Reference","title":"Fugl.render_vertical_scrollbar","text":"Render vertical scrollbar\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.reset_plot_view_bounds-Tuple{PlotState}","page":"API Reference","title":"Fugl.reset_plot_view_bounds","text":"reset_plot_view_bounds(state::PlotState)\n\nReturns a copy of the PlotState with currentbounds reset to nothing, falling back to initialbounds.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.run-Tuple{Function}","page":"API Reference","title":"Fugl.run","text":"run(ui_function::Function; title::String=\"Fugl\", window_width_px::Integer=1920, window_height_px::Integer=1080, fps_overlay::Bool=false, periodic_callbacks::Vector{PeriodicCallback}=PeriodicCallback[])\n\nRun the main loop for the GUI application. This function handles the rendering and event processing for the GUI.\n\nArguments\n\nui_function::Function: Function that returns an AbstractView for the UI\ntitle::String=\"Fugl\": Window title\nwindow_width_px::Integer=1920: Initial window width\nwindow_height_px::Integer=1080: Initial window height\nfps_overlay::Bool=false: Show frame count and FPS in upper right corner\nperiodic_callbacks::Vector{PeriodicCallback}=PeriodicCallback[]: Periodic callbacks to execute at specified frame intervals\n\nExamples\n\n# Create a callback that runs every 60 frames (approximately once per second at 60fps)\nfile_check_callback = PeriodicCallback(() -> check_files(), 60)\n\n# Create a callback that runs every 300 frames (every 5 seconds at 60fps)\ndata_update_callback = PeriodicCallback(() -> update_data(), 300)\n\nrun(MyApp, periodic_callbacks=[file_check_callback, data_update_callback])\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.safe_substring-Tuple{AbstractString, Int64, Int64}","page":"API Reference","title":"Fugl.safe_substring","text":"Safely get a substring using character-based indexing instead of byte indexing. This handles Unicode characters correctly.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.safe_substring_to_end-Tuple{AbstractString, Int64}","page":"API Reference","title":"Fugl.safe_substring_to_end","text":"Safely get a substring from start to end of string using character indexing.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.scroll_callback-Tuple{Any, Any, Any, InputState}","page":"API Reference","title":"Fugl.scroll_callback","text":"Mouse scroll callback to track scroll wheel input\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.set_selection-Tuple{EditorState, Fugl.CursorPosition, Fugl.CursorPosition}","page":"API Reference","title":"Fugl.set_selection","text":"Set a text selection from start to end position.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.should_invalidate_cache-Tuple{Fugl.RenderCache, UInt64, NTuple{4, Float32}}","page":"API Reference","title":"Fugl.should_invalidate_cache","text":"Check if a cache needs to be invalidated based on content hash and bounds. Each component should provide its own contenthashfunc that captures all the state that affects rendering.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.should_invalidate_plot_cache-Tuple{PlotView, NTuple{4, Float32}}","page":"API Reference","title":"Fugl.should_invalidate_plot_cache","text":"Check if plot cache should be invalidated based on content changes or bounds changes\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.should_invalidate_text_cache-Tuple{String, Any, Bool, Any, Any, NTuple{4, Float32}, Any}","page":"API Reference","title":"Fugl.should_invalidate_text_cache","text":"Check if text component cache should be invalidated\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.split_line_at_nan-Tuple{Vector{Float32}, Vector{Float32}}","page":"API Reference","title":"Fugl.split_line_at_nan","text":"Split line data at NaN values into separate continuous segments. Returns a vector of (xsegment, ysegment) tuples.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.tokenize_julia_line-Tuple{String}","page":"API Reference","title":"Fugl.tokenize_julia_line","text":"Tokenize a Julia line and return tokens with color data. Returns (tokens, tokendata) where tokendata is [(position, text, color), ...]\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.tokenize_line_with_colors-Tuple{String}","page":"API Reference","title":"Fugl.tokenize_line_with_colors","text":"Tokenize a line of code and return tokens with color data. Returns (tokens, tokendata) where tokendata is [(position, text, color), ...]\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.tree_from_walkdir-Tuple{Vector{Tuple{String, Vector{String}, Vector{String}}}}","page":"API Reference","title":"Fugl.tree_from_walkdir","text":"Convert walkdir output to TreeNode tree\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.unregister_cache_framebuffer!-Tuple{UInt32}","page":"API Reference","title":"Fugl.unregister_cache_framebuffer!","text":"Cleanup function to remove framebuffer from tracking when deleted\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.update_cache!-Tuple{Fugl.RenderCache, UInt32, UInt32, Union{Nothing, UInt32}, UInt64, NTuple{4, Float32}}","page":"API Reference","title":"Fugl.update_cache!","text":"Update a cache with new framebuffer, content hash, and bounds\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.update_fps_stats!-Tuple{Ref{Int64}, Ref{Float64}, Float64, Float64, Ref{Float64}}","page":"API Reference","title":"Fugl.update_fps_stats!","text":"update_fps_stats!(debug_frame_count, debug_last_time, frame_start_time, debug_fps_update_interval, current_fps)\n\nUpdate FPS statistics when overlay is enabled. Returns current FPS value.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.update_no_fps_stats-Tuple{Ref{Int64}, Ref{Float64}, Float64, Float64, Ref{Float64}}","page":"API Reference","title":"Fugl.update_no_fps_stats","text":"update_no_fps_stats(debug_frame_count, debug_last_time, frame_start_time, debug_fps_update_interval, current_fps)\n\nNo-op function for when FPS overlay is disabled. Returns unchanged debug_fps value.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Fugl.wrap_cell_text-Tuple{String, Any, Int64, Float32, Int64}","page":"API Reference","title":"Fugl.wrap_cell_text","text":"wrap_cell_text(text, font, size_px, available_width, max_rows)\n\nWrap text for a table cell, respecting maxrows limit and clipping if necessary. Returns a vector of strings representing the lines to display. maxrows = 0 means no wrapping (single line with character-level clipping and ellipsis).\n\n\n\n\n\n","category":"method"},{"location":"Components/sizing/#Sizing","page":"Sizing","title":"Sizing","text":"","category":"section"},{"location":"Components/sizing/","page":"Sizing","title":"Sizing","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column(\n            IntrinsicWidth(Container(Text(\"IntrinsicWidth\"))),\n            IntrinsicSize(Container(Text(\"IntrinsicSize\"))),\n            IntrinsicHeight(Container(Text(\"IntrinsicHeight\"))),\n        )\n    )\nend\n\nscreenshot(MyApp, \"intrinsic_sizing.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/sizing/","page":"Sizing","title":"Sizing","text":"(Image: Intrinsic sizing example)","category":"page"},{"location":"Components/sizing/","page":"Sizing","title":"Sizing","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Container(\n        Column(\n            FixedSize(Container(), 812, 50),\n            FixedSize(Container(), 812, 50),\n            FixedSize(Container(), 812, 50),\n        )\n    )\nend\n\nscreenshot(MyApp, \"fixed_sizing.png\", 812, 300);\nnothing #hide","category":"page"},{"location":"Components/sizing/","page":"Sizing","title":"Sizing","text":"(Image: Fixed sizing example)","category":"page"},{"location":"Components/text_button/#TextButton","page":"TextButton","title":"TextButton","text":"","category":"section"},{"location":"Components/text_button/","page":"TextButton","title":"TextButton","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        TextButton(\"Some Text\",\n        on_click=() -> println(\"Clicked\"),\n        text_style = TextStyle(),\n        container_style = ContainerStyle()\n        )\n    )\nend\n\nscreenshot(MyApp, \"textButton.png\", 812, 150);\nnothing #hide","category":"page"},{"location":"Components/text_button/","page":"TextButton","title":"TextButton","text":"(Image: Text Button)","category":"page"},{"location":"Components/text_button/#IntrinsicSize-TextButton","page":"TextButton","title":"IntrinsicSize TextButton","text":"","category":"section"},{"location":"Components/text_button/","page":"TextButton","title":"TextButton","text":"using Fugl\n\nfunction MyApp()\n    Container(\n        AlignCenter(\n            IntrinsicSize(\n                TextButton(\"Some Text\",\n                on_click=() -> println(\"Clicked\"),\n                text_style = TextStyle(),\n                container_style = ContainerStyle()\n                )\n            )\n        )\n    )\nend\n\nscreenshot(MyApp, \"intrinsicSizeTextButton.png\", 812, 150);\nnothing #hide","category":"page"},{"location":"Components/text_button/","page":"TextButton","title":"TextButton","text":"(Image: Text Button)","category":"page"},{"location":"Components/text_button/#Dark-Theme-Example","page":"TextButton","title":"Dark Theme Example","text":"","category":"section"},{"location":"Components/text_button/","page":"TextButton","title":"TextButton","text":"using Fugl\n\nfunction MyApp()\n    # Dark theme button style\n    dark_button_style = ContainerStyle(\n        background_color = Vec4f(0.15, 0.15, 0.15, 1.0),\n        border_color = Vec4f(0.4, 0.6, 0.8, 1.0),\n        border_width = 2.0f0\n    )\n    \n    dark_text_style = TextStyle(\n        color = Vec4f(0.9, 0.9, 0.9, 1.0),\n        size_px = 16\n    )\n    \n    # Dark background container\n    Container(\n        AlignCenter(\n            FixedSize(\n                TextButton(\"Dark Mode Button\",\n                    on_click=() -> println(\"Dark button clicked\"),\n                    text_style = dark_text_style,\n                    container_style = dark_button_style\n                ),\n                200, 50\n            )\n        ),\n        style = ContainerStyle(background_color = Vec4f(0.1, 0.1, 0.1, 1.0))\n    )\nend\n\nscreenshot(MyApp, \"dark_text_button.png\", 812, 150);\nnothing #hide","category":"page"},{"location":"Components/text_button/","page":"TextButton","title":"TextButton","text":"(Image: Dark Text Button)","category":"page"},{"location":"Components/card/#Card","page":"Card","title":"Card","text":"","category":"section"},{"location":"Components/card/","page":"Card","title":"Card","text":"The Card component displays a title and content in a styled container, useful for quickly get a UI up an running.","category":"page"},{"location":"Components/card/#Example","page":"Card","title":"Example","text":"","category":"section"},{"location":"Components/card/","page":"Card","title":"Card","text":"using Fugl\nusing Fugl: Text\n\nfunction MyApp()\n    Card(\n        \"Card Title\",\n        Text(\"Card contents\")\n    )\nend\n\nscreenshot(MyApp, \"card_example.png\", 812, 120);\nnothing #hide","category":"page"},{"location":"Components/card/","page":"Card","title":"Card","text":"(Image: Card Example)","category":"page"},{"location":"#Fugl.jl","page":"Fugl.jl","title":"Fugl.jl","text":"","category":"section"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"Fugl.jl is a functional GUI library written in Julia using OpenGL.","category":"page"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"It is intended to be a simple library with few depencdencies, suitable for making scientific applications.","category":"page"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"Fugl.jl has a short distance from component to shader, enabling fast and intuitive user interfaces.","category":"page"},{"location":"","page":"Fugl.jl","title":"Fugl.jl","text":"(Image: Highlight Image)","category":"page"},{"location":"Components/tree/#Tree","page":"Tree","title":"Tree","text":"","category":"section"},{"location":"Components/tree/","page":"Tree","title":"Tree","text":"A tree componnent, primarily intended to show file structure/select files.","category":"page"},{"location":"Components/tree/","page":"Tree","title":"Tree","text":"using Fugl\n\nfunction MyApp()\n    project_dir = pwd()\n    items = [item for item in walkdir(project_dir)]\n    root_node = tree_from_walkdir(items)\n    tree_state = Ref(TreeState(root_node))\n\n    Card(\n        \"Explorer\",\n        Tree(\n            tree_state[];\n            on_state_change=(new_state) -> tree_state[] = new_state\n        )\n    )\nend\n\nscreenshot(MyApp, \"tree_example.png\", 400, 600);\nnothing #hide","category":"page"},{"location":"Components/tree/","page":"Tree","title":"Tree","text":"(Image: Tree Example)","category":"page"},{"location":"Components/tree/#Empty-contents","page":"Tree","title":"Empty contents","text":"","category":"section"},{"location":"Components/tree/","page":"Tree","title":"Tree","text":"using Fugl\n\nfunction MyApp()\n    tree_state = Ref(TreeState(nothing))\n    Card(\"Explorer\", Tree(tree_state[]))\nend\n\nscreenshot(MyApp, \"tree_empty_example.png\", 400, 120);\nnothing #hide","category":"page"},{"location":"Components/tree/","page":"Tree","title":"Tree","text":"(Image: Empty Tree Example)","category":"page"},{"location":"Components/tree/","page":"Tree","title":"Tree","text":"","category":"page"},{"location":"Components/tree/","page":"Tree","title":"Tree","text":"using Fugl\n\nfunction MyApp()\n    empty_node = TreeNode(\"EmptyFolder\", TreeNode[], true)\n    tree_state = Ref(TreeState(empty_node; open_folders=Set([empty_node.name])))\n    Card(\"Explorer\", Tree(tree_state[]))\nend\n\nscreenshot(MyApp, \"tree_empty_folder_example.png\", 400, 120);\nnothing #hide","category":"page"},{"location":"Components/tree/","page":"Tree","title":"Tree","text":"(Image: Empty Folder Example)","category":"page"}]
}
